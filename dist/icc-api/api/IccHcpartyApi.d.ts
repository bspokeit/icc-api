/**
 * iCure Cloud API Documentation
 * Spring shop sample application
 *
 * OpenAPI spec version: v0.0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { XHR } from "./XHR"
import { DocIdentifier } from "../model/DocIdentifier"
import { HealthcareParty } from "../model/HealthcareParty"
import { ListOfIds } from "../model/ListOfIds"
import { PaginatedListHealthcareParty } from "../model/PaginatedListHealthcareParty"
import { PublicKey } from "../model/PublicKey"
export declare class IccHcpartyApi {
  host: string
  headers: Array<XHR.Header>
  fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>
  constructor(
    host: string,
    headers: any,
    fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>
  )
  setHeaders(h: Array<XHR.Header>): void
  handleError(e: XHR.XHRError): never
  /**
   * One of Name or Last name+First name, Nihii, and Public key are required.
   * @summary Create a healthcare party
   * @param body
   */
  createHealthcareParty(body?: HealthcareParty): Promise<HealthcareParty>
  /**
   * One of Name or Last name+First name, Nihii, and Public key are required.
   * @summary Create a healthcare party
   * @param body
   * @param groupId
   */
  createHealthcarePartyInGroup(groupId: string, body?: HealthcareParty): Promise<HealthcareParty>
  /**
   * Deleting a healthcareParty. Response is an array containing the id of deleted healthcare party.
   * @summary Delete a healthcare party
   * @param healthcarePartyIds
   */
  deleteHealthcareParties(healthcarePartyIds: string): Promise<Array<DocIdentifier>>
  /**
   * Deleting a healthcareParty. Response is an array containing the id of deleted healthcare party.
   * @summary Delete a healthcare party
   * @param groupId
   * @param healthcarePartyIds
   */
  deleteHealthcarePartiesInGroup(
    groupId: string,
    healthcarePartyIds: string
  ): Promise<Array<DocIdentifier>>
  /**
   * Returns a list of healthcare parties.
   * @summary Find healthcare parties by name with(out) pagination
   * @param name The Last name search value
   * @param startKey A healthcare party Last name
   * @param startDocumentId A healthcare party document ID
   * @param limit Number of rows
   * @param desc Descending
   */
  findByName(
    name?: string,
    startKey?: string,
    startDocumentId?: string,
    limit?: number,
    desc?: boolean
  ): Promise<PaginatedListHealthcareParty>
  /**
   * Returns a list of healthcare parties.
   * @summary Find healthcare parties by name with(out) pagination
   * @param type The type of the HCP (persphysician)
   * @param spec The speciality of the HCP
   * @param firstCode The first postCode for the HCP
   * @param lastCode The last postCode for the HCP
   * @param limit Number of rows
   */
  findBySpecialityAndPostCode(
    type: string,
    spec: string,
    firstCode: string,
    lastCode: string,
    limit?: number
  ): Promise<PaginatedListHealthcareParty>
  /**
   * Returns a list of healthcare parties.
   * @summary Find healthcare parties by nihii or ssin with(out) pagination
   * @param searchValue
   * @param startKey A healthcare party Last name
   * @param startDocumentId A healthcare party document ID
   * @param limit Number of rows
   * @param desc Descending
   */
  findBySsinOrNihii(
    searchValue: string,
    startKey?: string,
    startDocumentId?: string,
    limit?: number,
    desc?: boolean
  ): Promise<PaginatedListHealthcareParty>
  /**
   * General information about the current healthcare Party
   * @summary Get the current healthcare party if logged in.
   */
  getCurrentHealthcareParty(): Promise<HealthcareParty>
  /**
   * (key, value) of the map is as follows: (ID of the owner of the encrypted AES key, encrypted AES key)
   * @summary Get the HcParty encrypted AES keys indexed by owner
   * @param healthcarePartyId
   */
  getHcPartyKeysForDelegate(
    healthcarePartyId: string
  ): Promise<{
    [key: string]: string
  }>
  /**
   * General information about the healthcare Party
   * @summary Get healthcareParties by their IDs
   * @param healthcarePartyIds
   */
  getHealthcareParties(healthcarePartyIds: string): Promise<Array<HealthcareParty>>
  /**
   * Return a list of children hcp.
   * @summary Find children of an healthcare parties
   * @param parentId
   */
  getHealthcarePartiesByParentId(parentId: string): Promise<Array<HealthcareParty>>
  /**
   * General information about the healthcare Party
   * @summary Get healthcareParties by their IDs
   * @param body
   * @param groupId
   */
  getHealthcarePartiesInGroup(groupId: string, body?: ListOfIds): Promise<Array<HealthcareParty>>
  /**
   * General information about the healthcare Party
   * @summary Get a healthcareParty by his ID
   * @param healthcarePartyId
   */
  getHealthcareParty(healthcarePartyId: string): Promise<HealthcareParty>
  /**
   * Returns the public key of a healthcare party in Hex
   * @summary Get public key of a healthcare party
   * @param healthcarePartyId
   */
  getPublicKey(healthcarePartyId: string): Promise<PublicKey>
  /**
   * Returns a list of healthcare parties.
   * @summary Find healthcare parties by name with(out) pagination
   * @param name The Last name search value
   */
  listByName(name: string): Promise<Array<HealthcareParty>>
  /**
   * Returns a list of healthcare parties.
   * @summary List healthcare parties with(out) pagination
   * @param startKey A healthcare party Last name
   * @param startDocumentId A healthcare party document ID
   * @param limit Number of rows
   * @param desc Descending
   */
  listHealthcareParties(
    startKey?: string,
    startDocumentId?: string,
    limit?: number,
    desc?: boolean
  ): Promise<PaginatedListHealthcareParty>
  /**
   * No particular return value. It's just a message.
   * @summary Modify a Healthcare Party.
   * @param body
   */
  modifyHealthcareParty(body?: HealthcareParty): Promise<HealthcareParty>
  /**
   * No particular return value. It's just a message.
   * @summary Modify a Healthcare Party.
   * @param body
   * @param groupId
   */
  modifyHealthcarePartyInGroup(groupId: string, body?: HealthcareParty): Promise<HealthcareParty>
}
