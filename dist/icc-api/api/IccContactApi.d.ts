/**
 * iCure Cloud API Documentation
 * Spring shop sample application
 *
 * OpenAPI spec version: v0.0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { XHR } from "./XHR"
import { AbstractFilterContact } from "../model/AbstractFilterContact"
import { Contact } from "../model/Contact"
import { Content } from "../model/Content"
import { Delegation } from "../model/Delegation"
import { DocIdentifier } from "../model/DocIdentifier"
import { FilterChainContact } from "../model/FilterChainContact"
import { FilterChainService } from "../model/FilterChainService"
import { IcureStub } from "../model/IcureStub"
import { LabelledOccurence } from "../model/LabelledOccurence"
import { ListOfIds } from "../model/ListOfIds"
import { PaginatedListContact } from "../model/PaginatedListContact"
import { PaginatedListService } from "../model/PaginatedListService"
import { Service } from "../model/Service"
export declare class IccContactApi {
  host: string
  headers: Array<XHR.Header>
  fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>
  constructor(
    host: string,
    headers: any,
    fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>
  )
  setHeaders(h: Array<XHR.Header>): void
  handleError(e: XHR.XHRError): never
  /**
   * Keys must be delimited by coma
   * @summary Close contacts for Healthcare Party and secret foreign keys.
   * @param hcPartyId
   * @param secretFKeys
   */
  closeForHCPartyPatientForeignKeys(hcPartyId: string, secretFKeys: string): Promise<Array<Contact>>
  /**
   * Returns an instance of created contact.
   * @summary Create a contact with the current user
   * @param body
   */
  createContact(body?: Contact): Promise<Contact>
  /**
   * Response is a set containing the ID's of deleted contacts.
   * @summary Delete contacts.
   * @param contactIds
   */
  deleteContacts(contactIds: string): Promise<Array<DocIdentifier>>
  /**
   * Returns a list of contacts along with next start keys and Document ID. If the nextStartKey is Null it means that this is the last page.
   * @summary List contacts for the current user (HcParty) or the given hcparty in the filter
   * @param body
   * @param startDocumentId A Contact document ID
   * @param limit Number of rows
   */
  filterContactsBy(
    startDocumentId?: string,
    limit?: number,
    body?: FilterChainContact
  ): Promise<PaginatedListContact>
  /**
   * Returns a list of contacts along with next start keys and Document ID. If the nextStartKey is Null it means that this is the last page.
   * @summary List services for the current user (HcParty) or the given hcparty in the filter
   * @param body
   * @param startDocumentId A Contact document ID
   * @param limit Number of rows
   */
  filterServicesBy(
    startDocumentId?: string,
    limit?: number,
    body?: FilterChainService
  ): Promise<PaginatedListService>
  /**
   *
   * @summary List contacts found By Healthcare Party and form Id.
   * @param hcPartyId
   * @param formId
   */
  findByHCPartyFormId(hcPartyId: string, formId: string): Promise<Array<Contact>>
  /**
   *
   * @summary List contacts found By Healthcare Party and form Id.
   * @param body
   * @param hcPartyId
   */
  findByHCPartyFormIds(hcPartyId: string, body?: ListOfIds): Promise<Array<Contact>>
  /**
   * Keys must be delimited by coma
   * @summary List contacts found By Healthcare Party and secret foreign keys.
   * @param hcPartyId
   * @param secretFKeys
   * @param planOfActionsIds
   * @param skipClosedContacts
   */
  findByHCPartyPatientSecretFKeys(
    hcPartyId: string,
    secretFKeys: string,
    planOfActionsIds?: string,
    skipClosedContacts?: boolean
  ): Promise<Array<Contact>>
  /**
   *
   * @summary List contacts found By Healthcare Party and Patient foreign keys.
   * @param body
   * @param hcPartyId
   */
  findContactsByHCPartyPatientForeignKeys(
    hcPartyId: string,
    body?: ListOfIds
  ): Promise<Array<Contact>>
  /**
   * Keys must be delimited by coma
   * @summary List contacts found By Healthcare Party and secret foreign keys.
   * @param hcPartyId
   * @param secretFKeys
   */
  findContactsDelegationsStubsByHCPartyPatientForeignKeys(
    hcPartyId: string,
    secretFKeys: string
  ): Promise<Array<IcureStub>>
  /**
   *
   * @summary Get a contact
   * @param contactId
   */
  getContact(contactId: string): Promise<Contact>
  /**
   *
   * @summary Get contacts
   * @param body
   */
  getContacts(body?: ListOfIds): Promise<Array<Contact>>
  /**
   *
   * @summary Get an empty content
   */
  getEmptyContent(): Promise<Content>
  /**
   *
   * @summary Get the list of all used codes frequencies in services
   * @param codeType
   * @param minOccurences
   */
  getServiceCodesOccurences(
    codeType: string,
    minOccurences: number
  ): Promise<Array<LabelledOccurence>>
  /**
   * Returns a list of contacts.
   * @summary List contacts bu opening date parties with(out) pagination
   * @param startKey The contact openingDate
   * @param endKey The contact max openingDate
   * @param hcpartyid hcpartyid
   * @param startDocumentId A contact party document ID
   * @param limit Number of rows
   */
  listContactsByOpeningDate(
    startKey: number,
    endKey: number,
    hcpartyid: string,
    startDocumentId?: string,
    limit?: number
  ): Promise<PaginatedListContact>
  /**
   * Returns a list of services
   * @summary List services with provided ids
   * @param body
   */
  listServices(body?: ListOfIds): Promise<Array<Service>>
  /**
   * Returns a list of services
   * @summary List services linked to provided ids
   * @param body
   * @param linkType The type of the link
   */
  listServicesLinkedTo(linkType?: string, body?: ListOfIds): Promise<Array<Service>>
  /**
   *
   * @summary Get ids of contacts matching the provided filter for the current user (HcParty)
   * @param body
   */
  matchContactsBy(body?: AbstractFilterContact): Promise<Array<string>>
  /**
   * Returns the modified contact.
   * @summary Modify a contact
   * @param body
   */
  modifyContact(body?: Contact): Promise<Contact>
  /**
   * Returns the modified contacts.
   * @summary Modify a batch of contacts
   * @param body
   */
  modifyContacts(body?: Array<Contact>): Promise<Array<Contact>>
  /**
   * It delegates a contact to a healthcare party (By current healthcare party). Returns the contact with new delegations.
   * @summary Delegates a contact to a healthcare party
   * @param body
   * @param contactId
   */
  newContactDelegations(contactId: string, body?: Delegation): Promise<Contact>
  /**
   * Keys must be delimited by coma
   * @summary Update delegations in healthElements.
   * @param body
   */
  setContactsDelegations(body?: Array<IcureStub>): Promise<Array<Contact>>
}
