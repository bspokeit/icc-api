/**
 * iCure Cloud API Documentation
 * Spring shop sample application
 *
 * OpenAPI spec version: v0.0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { XHR } from "./XHR"
import { DocIdentifier } from "../model/DocIdentifier"
import { EntityTemplate } from "../model/EntityTemplate"
export declare class IccEntitytemplateApi {
  host: string
  headers: Array<XHR.Header>
  fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>
  constructor(
    host: string,
    headers: any,
    fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>
  )
  setHeaders(h: Array<XHR.Header>): void
  handleError(e: XHR.XHRError): never
  /**
   * Type, EntityTemplate and Version are required.
   * @summary Create a EntityTemplate
   * @param body
   */
  createEntityTemplate(body?: EntityTemplate): Promise<EntityTemplate>
  /**
   *
   * @summary Delete entity templates
   * @param entityTemplateIds
   */
  deleteEntityTemplate(entityTemplateIds: string): Promise<Array<DocIdentifier>>
  /**
   * Returns a list of entityTemplates matched with given input.
   * @summary Finding entityTemplates by entityTemplate, type and version with pagination.
   * @param type
   * @param searchString
   * @param includeEntities
   */
  findAllEntityTemplates(
    type: string,
    searchString?: string,
    includeEntities?: boolean
  ): Promise<Array<EntityTemplate>>
  /**
   * Returns a list of entityTemplates matched with given input.
   * @summary Finding entityTemplates by userId, entityTemplate, type and version with pagination.
   * @param userId
   * @param type
   * @param searchString
   * @param includeEntities
   */
  findEntityTemplates(
    userId: string,
    type: string,
    searchString?: string,
    includeEntities?: boolean
  ): Promise<Array<EntityTemplate>>
  /**
   * Get a entityTemplate based on ID or (entityTemplate,type,version) as query strings. (entityTemplate,type,version) is unique.
   * @summary Get a entityTemplate
   * @param entityTemplateId EntityTemplate id
   */
  getEntityTemplate(entityTemplateId: string): Promise<EntityTemplate>
  /**
   * Keys must be delimited by coma
   * @summary Get a list of entityTemplates by ids
   * @param entityTemplateIds
   */
  getEntityTemplates(entityTemplateIds: string): Promise<Array<EntityTemplate>>
  /**
   * Modification of (type, entityTemplate, version) is not allowed.
   * @summary Modify a entityTemplate
   * @param body
   */
  modifyEntityTemplate(body?: EntityTemplate): Promise<EntityTemplate>
}
