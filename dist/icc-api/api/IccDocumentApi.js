"use strict"
Object.defineProperty(exports, "__esModule", { value: true })
/**
 * iCure Cloud API Documentation
 * Spring shop sample application
 *
 * OpenAPI spec version: v0.0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
const XHR_1 = require("./XHR")
const DocIdentifier_1 = require("../model/DocIdentifier")
const Document_1 = require("../model/Document")
const IcureStub_1 = require("../model/IcureStub")
class IccDocumentApi {
  constructor(host, headers, fetchImpl) {
    this.host = host
    this.headers = Object.keys(headers).map(k => new XHR_1.XHR.Header(k, headers[k]))
    this.fetchImpl = fetchImpl
  }
  setHeaders(h) {
    this.headers = h
  }
  handleError(e) {
    throw e
  }
  /**
   *
   * @summary Creates a document
   * @param body
   */
  createDocument(body) {
    let _body = null
    _body = body
    const _url = this.host + `/document` + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new Document_1.Document(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Deletes a document's attachment
   * @param documentId
   */
  deleteAttachment(documentId) {
    let _body = null
    const _url =
      this.host +
      `/document/${encodeURIComponent(String(documentId))}/attachment` +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    return XHR_1.XHR.sendCommand("DELETE", _url, headers, _body, this.fetchImpl)
      .then(doc => new Document_1.Document(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Deletes a document
   * @param documentIds
   */
  deleteDocument(documentIds) {
    let _body = null
    const _url =
      this.host +
      `/document/${encodeURIComponent(String(documentIds))}` +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    return XHR_1.XHR.sendCommand("DELETE", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new DocIdentifier_1.DocIdentifier(it)))
      .catch(err => this.handleError(err))
  }
  /**
   * Keys must be delimited by coma
   * @summary List documents found By type, By Healthcare Party and secret foreign keys.
   * @param documentTypeCode
   * @param hcPartyId
   * @param secretFKeys
   */
  findByTypeHCPartyMessageSecretFKeys(documentTypeCode, hcPartyId, secretFKeys) {
    let _body = null
    const _url =
      this.host +
      `/document/byTypeHcPartySecretForeignKeys` +
      "?ts=" +
      new Date().getTime() +
      (documentTypeCode
        ? "&documentTypeCode=" + encodeURIComponent(String(documentTypeCode))
        : "") +
      (hcPartyId ? "&hcPartyId=" + encodeURIComponent(String(hcPartyId)) : "") +
      (secretFKeys ? "&secretFKeys=" + encodeURIComponent(String(secretFKeys)) : "")
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new Document_1.Document(it)))
      .catch(err => this.handleError(err))
  }
  /**
   * Keys must be delimited by coma
   * @summary List documents found By Healthcare Party and secret foreign keys.
   * @param hcPartyId
   * @param secretFKeys
   */
  findDocumentsByHCPartyPatientForeignKeys(hcPartyId, secretFKeys) {
    let _body = null
    const _url =
      this.host +
      `/document/byHcPartySecretForeignKeys` +
      "?ts=" +
      new Date().getTime() +
      (hcPartyId ? "&hcPartyId=" + encodeURIComponent(String(hcPartyId)) : "") +
      (secretFKeys ? "&secretFKeys=" + encodeURIComponent(String(secretFKeys)) : "")
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new Document_1.Document(it)))
      .catch(err => this.handleError(err))
  }
  /**
   * Keys must be delimited by coma
   * @summary List documents with no delegation
   * @param limit
   */
  findWithoutDelegation(limit) {
    let _body = null
    const _url =
      this.host +
      `/document/woDelegation` +
      "?ts=" +
      new Date().getTime() +
      (limit ? "&limit=" + encodeURIComponent(String(limit)) : "")
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new Document_1.Document(it)))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Gets a document
   * @param documentId
   */
  getDocument(documentId) {
    let _body = null
    const _url =
      this.host +
      `/document/${encodeURIComponent(String(documentId))}` +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new Document_1.Document(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Load document's attachment
   * @param documentId
   * @param attachmentId
   * @param enckeys
   * @param fileName
   */
  getDocumentAttachment(documentId, attachmentId, enckeys, fileName) {
    let _body = null
    const _url =
      this.host +
      `/document/${encodeURIComponent(String(documentId))}/attachment/${encodeURIComponent(
        String(attachmentId)
      )}` +
      "?ts=" +
      new Date().getTime() +
      (enckeys ? "&enckeys=" + encodeURIComponent(String(enckeys)) : "") +
      (fileName ? "&fileName=" + encodeURIComponent(String(fileName)) : "")
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body)
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Gets a document
   * @param externalUuid
   */
  getDocumentByExternalUuid(externalUuid) {
    let _body = null
    const _url =
      this.host +
      `/document/externaluuid/${encodeURIComponent(String(externalUuid))}` +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new Document_1.Document(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Gets a document
   * @param body
   */
  getDocuments(body) {
    let _body = null
    _body = body
    const _url = this.host + `/document/batch` + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new Document_1.Document(it)))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Get all documents with externalUuid
   * @param externalUuid
   */
  getDocumentsByExternalUuid(externalUuid) {
    let _body = null
    const _url =
      this.host +
      `/document/externaluuid/${encodeURIComponent(String(externalUuid))}/all` +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new Document_1.Document(it)))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Updates a document
   * @param body
   */
  modifyDocument(body) {
    let _body = null
    _body = body
    const _url = this.host + `/document` + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("PUT", _url, headers, _body, this.fetchImpl)
      .then(doc => new Document_1.Document(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   * Returns the modified documents.
   * @summary Updates a batch of documents
   * @param body
   */
  modifyDocuments(body) {
    let _body = null
    _body = body
    const _url = this.host + `/document/batch` + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("PUT", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new Document_1.Document(it)))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Creates a document's attachment
   * @param body
   * @param documentId
   * @param enckeys
   */
  setDocumentAttachment(documentId, enckeys, body) {
    let _body = null
    _body = body
    const _url =
      this.host +
      `/document/${encodeURIComponent(String(documentId))}/attachment` +
      "?ts=" +
      new Date().getTime() +
      (enckeys ? "&enckeys=" + encodeURIComponent(String(enckeys)) : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/octet-stream"))
    return XHR_1.XHR.sendCommand("PUT", _url, headers, _body, this.fetchImpl)
      .then(doc => new Document_1.Document(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Creates a document's attachment
   * @param documentId
   * @param enckeys
   */
  setDocumentAttachmentMulti(documentId, enckeys) {
    let _body = null
    const _url =
      this.host +
      `/document/${encodeURIComponent(String(documentId))}/attachment/multipart` +
      "?ts=" +
      new Date().getTime() +
      (enckeys ? "&enckeys=" + encodeURIComponent(String(enckeys)) : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "multipart/form-data"))
    return XHR_1.XHR.sendCommand("PUT", _url, headers, _body, this.fetchImpl)
      .then(doc => new Document_1.Document(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   * Keys must be delimited by coma
   * @summary Update delegations in healthElements.
   * @param body
   */
  setDocumentsDelegations(body) {
    let _body = null
    _body = body
    const _url = this.host + `/document/delegations` + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new IcureStub_1.IcureStub(it)))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Creates a document's attachment
   * @param body
   * @param documentId
   * @param enckeys
   */
  setSafeDocumentAttachment(documentId, enckeys, body) {
    let _body = null
    _body = body
    const _url =
      this.host +
      `/document/attachment` +
      "?ts=" +
      new Date().getTime() +
      (documentId ? "&documentId=" + encodeURIComponent(String(documentId)) : "") +
      (enckeys ? "&enckeys=" + encodeURIComponent(String(enckeys)) : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/octet-stream"))
    return XHR_1.XHR.sendCommand("PUT", _url, headers, _body, this.fetchImpl)
      .then(doc => new Document_1.Document(doc.body))
      .catch(err => this.handleError(err))
  }
}
exports.IccDocumentApi = IccDocumentApi
//# sourceMappingURL=IccDocumentApi.js.map
