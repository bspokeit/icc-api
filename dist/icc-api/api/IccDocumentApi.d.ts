/**
 * iCure Cloud API Documentation
 * Spring shop sample application
 *
 * OpenAPI spec version: v0.0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { XHR } from "./XHR"
import { DocIdentifier } from "../model/DocIdentifier"
import { Document } from "../model/Document"
import { IcureStub } from "../model/IcureStub"
import { ListOfIds } from "../model/ListOfIds"
export declare class IccDocumentApi {
  host: string
  headers: Array<XHR.Header>
  fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>
  constructor(
    host: string,
    headers: any,
    fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>
  )
  setHeaders(h: Array<XHR.Header>): void
  handleError(e: XHR.XHRError): never
  /**
   *
   * @summary Creates a document
   * @param body
   */
  createDocument(body?: Document): Promise<Document>
  /**
   *
   * @summary Deletes a document's attachment
   * @param documentId
   */
  deleteAttachment(documentId: string): Promise<Document>
  /**
   *
   * @summary Deletes a document
   * @param documentIds
   */
  deleteDocument(documentIds: string): Promise<Array<DocIdentifier>>
  /**
   * Keys must be delimited by coma
   * @summary List documents found By type, By Healthcare Party and secret foreign keys.
   * @param documentTypeCode
   * @param hcPartyId
   * @param secretFKeys
   */
  findByTypeHCPartyMessageSecretFKeys(
    documentTypeCode: string,
    hcPartyId: string,
    secretFKeys: string
  ): Promise<Array<Document>>
  /**
   * Keys must be delimited by coma
   * @summary List documents found By Healthcare Party and secret foreign keys.
   * @param hcPartyId
   * @param secretFKeys
   */
  findDocumentsByHCPartyPatientForeignKeys(
    hcPartyId: string,
    secretFKeys: string
  ): Promise<Array<Document>>
  /**
   * Keys must be delimited by coma
   * @summary List documents with no delegation
   * @param limit
   */
  findWithoutDelegation(limit?: number): Promise<Array<Document>>
  /**
   *
   * @summary Gets a document
   * @param documentId
   */
  getDocument(documentId: string): Promise<Document>
  /**
   *
   * @summary Load document's attachment
   * @param documentId
   * @param attachmentId
   * @param enckeys
   * @param fileName
   */
  getDocumentAttachment(
    documentId: string,
    attachmentId: string,
    enckeys?: string,
    fileName?: string
  ): Promise<ArrayBuffer>
  /**
   *
   * @summary Gets a document
   * @param externalUuid
   */
  getDocumentByExternalUuid(externalUuid: string): Promise<Document>
  /**
   *
   * @summary Gets a document
   * @param body
   */
  getDocuments(body?: ListOfIds): Promise<Array<Document>>
  /**
   *
   * @summary Get all documents with externalUuid
   * @param externalUuid
   */
  getDocumentsByExternalUuid(externalUuid: string): Promise<Array<Document>>
  /**
   *
   * @summary Updates a document
   * @param body
   */
  modifyDocument(body?: Document): Promise<Document>
  /**
   * Returns the modified documents.
   * @summary Updates a batch of documents
   * @param body
   */
  modifyDocuments(body?: Array<Document>): Promise<Array<Document>>
  /**
   *
   * @summary Creates a document's attachment
   * @param body
   * @param documentId
   * @param enckeys
   */
  setDocumentAttachment(documentId: string, enckeys?: string, body?: ArrayBuffer): Promise<Document>
  /**
   *
   * @summary Creates a document's attachment
   * @param documentId
   * @param enckeys
   */
  setDocumentAttachmentMulti(documentId: string, enckeys?: string): Promise<Document>
  /**
   * Keys must be delimited by coma
   * @summary Update delegations in healthElements.
   * @param body
   */
  setDocumentsDelegations(body?: Array<IcureStub>): Promise<Array<IcureStub>>
  /**
   *
   * @summary Creates a document's attachment
   * @param body
   * @param documentId
   * @param enckeys
   */
  setSafeDocumentAttachment(
    documentId: string,
    enckeys?: string,
    body?: ArrayBuffer
  ): Promise<Document>
}
