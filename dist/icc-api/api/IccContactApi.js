"use strict"
Object.defineProperty(exports, "__esModule", { value: true })
/**
 * iCure Cloud API Documentation
 * Spring shop sample application
 *
 * OpenAPI spec version: v0.0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
const XHR_1 = require("./XHR")
const Contact_1 = require("../model/Contact")
const Content_1 = require("../model/Content")
const DocIdentifier_1 = require("../model/DocIdentifier")
const IcureStub_1 = require("../model/IcureStub")
const LabelledOccurence_1 = require("../model/LabelledOccurence")
const PaginatedListContact_1 = require("../model/PaginatedListContact")
const PaginatedListService_1 = require("../model/PaginatedListService")
const Service_1 = require("../model/Service")
class IccContactApi {
  constructor(host, headers, fetchImpl) {
    this.host = host
    this.headers = Object.keys(headers).map(k => new XHR_1.XHR.Header(k, headers[k]))
    this.fetchImpl = fetchImpl
  }
  setHeaders(h) {
    this.headers = h
  }
  handleError(e) {
    throw e
  }
  /**
   * Keys must be delimited by coma
   * @summary Close contacts for Healthcare Party and secret foreign keys.
   * @param hcPartyId
   * @param secretFKeys
   */
  closeForHCPartyPatientForeignKeys(hcPartyId, secretFKeys) {
    let _body = null
    const _url =
      this.host +
      `/contact/byHcPartySecretForeignKeys/close` +
      "?ts=" +
      new Date().getTime() +
      (hcPartyId ? "&hcPartyId=" + encodeURIComponent(String(hcPartyId)) : "") +
      (secretFKeys ? "&secretFKeys=" + encodeURIComponent(String(secretFKeys)) : "")
    let headers = this.headers
    return XHR_1.XHR.sendCommand("PUT", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new Contact_1.Contact(it)))
      .catch(err => this.handleError(err))
  }
  /**
   * Returns an instance of created contact.
   * @summary Create a contact with the current user
   * @param body
   */
  createContact(body) {
    let _body = null
    _body = body
    const _url = this.host + `/contact` + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new Contact_1.Contact(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   * Response is a set containing the ID's of deleted contacts.
   * @summary Delete contacts.
   * @param contactIds
   */
  deleteContacts(contactIds) {
    let _body = null
    const _url =
      this.host +
      `/contact/${encodeURIComponent(String(contactIds))}` +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    return XHR_1.XHR.sendCommand("DELETE", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new DocIdentifier_1.DocIdentifier(it)))
      .catch(err => this.handleError(err))
  }
  /**
   * Returns a list of contacts along with next start keys and Document ID. If the nextStartKey is Null it means that this is the last page.
   * @summary List contacts for the current user (HcParty) or the given hcparty in the filter
   * @param body
   * @param startDocumentId A Contact document ID
   * @param limit Number of rows
   */
  filterContactsBy(startDocumentId, limit, body) {
    let _body = null
    _body = body
    const _url =
      this.host +
      `/contact/filter` +
      "?ts=" +
      new Date().getTime() +
      (startDocumentId ? "&startDocumentId=" + encodeURIComponent(String(startDocumentId)) : "") +
      (limit ? "&limit=" + encodeURIComponent(String(limit)) : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new PaginatedListContact_1.PaginatedListContact(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   * Returns a list of contacts along with next start keys and Document ID. If the nextStartKey is Null it means that this is the last page.
   * @summary List services for the current user (HcParty) or the given hcparty in the filter
   * @param body
   * @param startDocumentId A Contact document ID
   * @param limit Number of rows
   */
  filterServicesBy(startDocumentId, limit, body) {
    let _body = null
    _body = body
    const _url =
      this.host +
      `/contact/service/filter` +
      "?ts=" +
      new Date().getTime() +
      (startDocumentId ? "&startDocumentId=" + encodeURIComponent(String(startDocumentId)) : "") +
      (limit ? "&limit=" + encodeURIComponent(String(limit)) : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new PaginatedListService_1.PaginatedListService(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary List contacts found By Healthcare Party and form Id.
   * @param hcPartyId
   * @param formId
   */
  findByHCPartyFormId(hcPartyId, formId) {
    let _body = null
    const _url =
      this.host +
      `/contact/byHcPartyFormId` +
      "?ts=" +
      new Date().getTime() +
      (hcPartyId ? "&hcPartyId=" + encodeURIComponent(String(hcPartyId)) : "") +
      (formId ? "&formId=" + encodeURIComponent(String(formId)) : "")
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new Contact_1.Contact(it)))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary List contacts found By Healthcare Party and form Id.
   * @param body
   * @param hcPartyId
   */
  findByHCPartyFormIds(hcPartyId, body) {
    let _body = null
    _body = body
    const _url =
      this.host +
      `/contact/byHcPartyFormIds` +
      "?ts=" +
      new Date().getTime() +
      (hcPartyId ? "&hcPartyId=" + encodeURIComponent(String(hcPartyId)) : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new Contact_1.Contact(it)))
      .catch(err => this.handleError(err))
  }
  /**
   * Keys must be delimited by coma
   * @summary List contacts found By Healthcare Party and secret foreign keys.
   * @param hcPartyId
   * @param secretFKeys
   * @param planOfActionsIds
   * @param skipClosedContacts
   */
  findByHCPartyPatientSecretFKeys(hcPartyId, secretFKeys, planOfActionsIds, skipClosedContacts) {
    let _body = null
    const _url =
      this.host +
      `/contact/byHcPartySecretForeignKeys` +
      "?ts=" +
      new Date().getTime() +
      (hcPartyId ? "&hcPartyId=" + encodeURIComponent(String(hcPartyId)) : "") +
      (secretFKeys ? "&secretFKeys=" + encodeURIComponent(String(secretFKeys)) : "") +
      (planOfActionsIds
        ? "&planOfActionsIds=" + encodeURIComponent(String(planOfActionsIds))
        : "") +
      (skipClosedContacts
        ? "&skipClosedContacts=" + encodeURIComponent(String(skipClosedContacts))
        : "")
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new Contact_1.Contact(it)))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary List contacts found By Healthcare Party and Patient foreign keys.
   * @param body
   * @param hcPartyId
   */
  findContactsByHCPartyPatientForeignKeys(hcPartyId, body) {
    let _body = null
    _body = body
    const _url =
      this.host +
      `/contact/byHcPartyPatientForeignKeys` +
      "?ts=" +
      new Date().getTime() +
      (hcPartyId ? "&hcPartyId=" + encodeURIComponent(String(hcPartyId)) : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new Contact_1.Contact(it)))
      .catch(err => this.handleError(err))
  }
  /**
   * Keys must be delimited by coma
   * @summary List contacts found By Healthcare Party and secret foreign keys.
   * @param hcPartyId
   * @param secretFKeys
   */
  findContactsDelegationsStubsByHCPartyPatientForeignKeys(hcPartyId, secretFKeys) {
    let _body = null
    const _url =
      this.host +
      `/contact/byHcPartySecretForeignKeys/delegations` +
      "?ts=" +
      new Date().getTime() +
      (hcPartyId ? "&hcPartyId=" + encodeURIComponent(String(hcPartyId)) : "") +
      (secretFKeys ? "&secretFKeys=" + encodeURIComponent(String(secretFKeys)) : "")
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new IcureStub_1.IcureStub(it)))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Get a contact
   * @param contactId
   */
  getContact(contactId) {
    let _body = null
    const _url =
      this.host +
      `/contact/${encodeURIComponent(String(contactId))}` +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new Contact_1.Contact(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Get contacts
   * @param body
   */
  getContacts(body) {
    let _body = null
    _body = body
    const _url = this.host + `/contact/byIds` + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new Contact_1.Contact(it)))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Get an empty content
   */
  getEmptyContent() {
    let _body = null
    const _url = this.host + `/contact/service/content/empty` + "?ts=" + new Date().getTime()
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new Content_1.Content(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Get the list of all used codes frequencies in services
   * @param codeType
   * @param minOccurences
   */
  getServiceCodesOccurences(codeType, minOccurences) {
    let _body = null
    const _url =
      this.host +
      `/contact/service/codes/${encodeURIComponent(String(codeType))}/${encodeURIComponent(
        String(minOccurences)
      )}` +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new LabelledOccurence_1.LabelledOccurence(it)))
      .catch(err => this.handleError(err))
  }
  /**
   * Returns a list of contacts.
   * @summary List contacts bu opening date parties with(out) pagination
   * @param startKey The contact openingDate
   * @param endKey The contact max openingDate
   * @param hcpartyid hcpartyid
   * @param startDocumentId A contact party document ID
   * @param limit Number of rows
   */
  listContactsByOpeningDate(startKey, endKey, hcpartyid, startDocumentId, limit) {
    let _body = null
    const _url =
      this.host +
      `/contact/byOpeningDate` +
      "?ts=" +
      new Date().getTime() +
      (startKey ? "&startKey=" + encodeURIComponent(String(startKey)) : "") +
      (endKey ? "&endKey=" + encodeURIComponent(String(endKey)) : "") +
      (hcpartyid ? "&hcpartyid=" + encodeURIComponent(String(hcpartyid)) : "") +
      (startDocumentId ? "&startDocumentId=" + encodeURIComponent(String(startDocumentId)) : "") +
      (limit ? "&limit=" + encodeURIComponent(String(limit)) : "")
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new PaginatedListContact_1.PaginatedListContact(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   * Returns a list of services
   * @summary List services with provided ids
   * @param body
   */
  listServices(body) {
    let _body = null
    _body = body
    const _url = this.host + `/contact/service/byIds` + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new Service_1.Service(it)))
      .catch(err => this.handleError(err))
  }
  /**
   * Returns a list of services
   * @summary List services linked to provided ids
   * @param body
   * @param linkType The type of the link
   */
  listServicesLinkedTo(linkType, body) {
    let _body = null
    _body = body
    const _url =
      this.host +
      `/contact/service/linkedTo` +
      "?ts=" +
      new Date().getTime() +
      (linkType ? "&linkType=" + encodeURIComponent(String(linkType)) : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new Service_1.Service(it)))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Get ids of contacts matching the provided filter for the current user (HcParty)
   * @param body
   */
  matchContactsBy(body) {
    let _body = null
    _body = body
    const _url = this.host + `/contact/match` + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => JSON.parse(JSON.stringify(it))))
      .catch(err => this.handleError(err))
  }
  /**
   * Returns the modified contact.
   * @summary Modify a contact
   * @param body
   */
  modifyContact(body) {
    let _body = null
    _body = body
    const _url = this.host + `/contact` + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("PUT", _url, headers, _body, this.fetchImpl)
      .then(doc => new Contact_1.Contact(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   * Returns the modified contacts.
   * @summary Modify a batch of contacts
   * @param body
   */
  modifyContacts(body) {
    let _body = null
    _body = body
    const _url = this.host + `/contact/batch` + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("PUT", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new Contact_1.Contact(it)))
      .catch(err => this.handleError(err))
  }
  /**
   * It delegates a contact to a healthcare party (By current healthcare party). Returns the contact with new delegations.
   * @summary Delegates a contact to a healthcare party
   * @param body
   * @param contactId
   */
  newContactDelegations(contactId, body) {
    let _body = null
    _body = body
    const _url =
      this.host +
      `/contact/${encodeURIComponent(String(contactId))}/delegate` +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new Contact_1.Contact(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   * Keys must be delimited by coma
   * @summary Update delegations in healthElements.
   * @param body
   */
  setContactsDelegations(body) {
    let _body = null
    _body = body
    const _url = this.host + `/contact/delegations` + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new Contact_1.Contact(it)))
      .catch(err => this.handleError(err))
  }
}
exports.IccContactApi = IccContactApi
//# sourceMappingURL=IccContactApi.js.map
