"use strict"
Object.defineProperty(exports, "__esModule", { value: true })
/**
 * iCure Cloud API Documentation
 * Spring shop sample application
 *
 * OpenAPI spec version: v0.0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
const XHR_1 = require("./XHR")
const DocIdentifier_1 = require("../model/DocIdentifier")
const HealthElement_1 = require("../model/HealthElement")
const IcureStub_1 = require("../model/IcureStub")
class IccHelementApi {
  constructor(host, headers, fetchImpl) {
    this.host = host
    this.headers = Object.keys(headers).map(k => new XHR_1.XHR.Header(k, headers[k]))
    this.fetchImpl = fetchImpl
  }
  setHeaders(h) {
    this.headers = h
  }
  handleError(e) {
    throw e
  }
  /**
   * Returns an instance of created health element.
   * @summary Create a health element with the current user
   * @param body
   */
  createHealthElement(body) {
    let _body = null
    _body = body
    const _url = this.host + `/helement` + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new HealthElement_1.HealthElement(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   * Response is a set containing the ID's of deleted health elements.
   * @summary Delete health elements.
   * @param healthElementIds
   */
  deleteHealthElements(healthElementIds) {
    let _body = null
    const _url =
      this.host +
      `/helement/${encodeURIComponent(String(healthElementIds))}` +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    return XHR_1.XHR.sendCommand("DELETE", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new DocIdentifier_1.DocIdentifier(it)))
      .catch(err => this.handleError(err))
  }
  /**
   * Returns a list of health elements along with next start keys and Document ID. If the nextStartKey is Null it means that this is the last page.
   * @summary Filter health elements for the current user (HcParty)
   * @param body
   */
  filterHealthElementsBy(body) {
    let _body = null
    _body = body
    const _url = this.host + `/helement/filter` + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new HealthElement_1.HealthElement(it)))
      .catch(err => this.handleError(err))
  }
  /**
   * Keys hast to delimited by coma
   * @summary List health elements found By Healthcare Party and secret foreign keyelementIds.
   * @param hcPartyId
   * @param secretFKeys
   */
  findHealthElementsByHCPartyPatientForeignKeys(hcPartyId, secretFKeys) {
    let _body = null
    const _url =
      this.host +
      `/helement/byHcPartySecretForeignKeys` +
      "?ts=" +
      new Date().getTime() +
      (hcPartyId ? "&hcPartyId=" + encodeURIComponent(String(hcPartyId)) : "") +
      (secretFKeys ? "&secretFKeys=" + encodeURIComponent(String(secretFKeys)) : "")
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new HealthElement_1.HealthElement(it)))
      .catch(err => this.handleError(err))
  }
  /**
   * Keys must be delimited by coma
   * @summary List helement stubs found By Healthcare Party and secret foreign keys.
   * @param hcPartyId
   * @param secretFKeys
   */
  findHealthElementsDelegationsStubsByHCPartyPatientForeignKeys(hcPartyId, secretFKeys) {
    let _body = null
    const _url =
      this.host +
      `/helement/byHcPartySecretForeignKeys/delegations` +
      "?ts=" +
      new Date().getTime() +
      (hcPartyId ? "&hcPartyId=" + encodeURIComponent(String(hcPartyId)) : "") +
      (secretFKeys ? "&secretFKeys=" + encodeURIComponent(String(secretFKeys)) : "")
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new IcureStub_1.IcureStub(it)))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Get a health element
   * @param healthElementId
   */
  getHealthElement(healthElementId) {
    let _body = null
    const _url =
      this.host +
      `/helement/${encodeURIComponent(String(healthElementId))}` +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new HealthElement_1.HealthElement(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   * Returns the modified health element.
   * @summary Modify a health element
   * @param body
   */
  modifyHealthElement(body) {
    let _body = null
    _body = body
    const _url = this.host + `/helement` + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("PUT", _url, headers, _body, this.fetchImpl)
      .then(doc => new HealthElement_1.HealthElement(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   * Returns the modified health elements.
   * @summary Modify a batch of health elements
   * @param body
   */
  modifyHealthElements(body) {
    let _body = null
    _body = body
    const _url = this.host + `/helement/batch` + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("PUT", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new HealthElement_1.HealthElement(it)))
      .catch(err => this.handleError(err))
  }
  /**
   * It delegates a health element to a healthcare party (By current healthcare party). Returns the element with new delegations.
   * @summary Delegates a health element to a healthcare party
   * @param body
   * @param healthElementId
   */
  newHealthElementDelegations(healthElementId, body) {
    let _body = null
    _body = body
    const _url =
      this.host +
      `/helement/${encodeURIComponent(String(healthElementId))}/delegate` +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new HealthElement_1.HealthElement(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   * Keys must be delimited by coma
   * @summary Update delegations in healthElements.
   * @param body
   */
  setHealthElementsDelegations(body) {
    let _body = null
    _body = body
    const _url = this.host + `/helement/delegations` + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new HealthElement_1.HealthElement(it)))
      .catch(err => this.handleError(err))
  }
}
exports.IccHelementApi = IccHelementApi
//# sourceMappingURL=IccHelementApi.js.map
