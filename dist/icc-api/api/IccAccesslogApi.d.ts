/**
 * iCure Cloud API Documentation
 * Spring shop sample application
 *
 * OpenAPI spec version: v0.0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { XHR } from "./XHR"
import { AccessLog } from "../model/AccessLog"
import { DocIdentifier } from "../model/DocIdentifier"
import { PaginatedListAccessLog } from "../model/PaginatedListAccessLog"
export declare class IccAccesslogApi {
  host: string
  headers: Array<XHR.Header>
  fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>
  constructor(
    host: string,
    headers: any,
    fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>
  )
  setHeaders(h: Array<XHR.Header>): void
  handleError(e: XHR.XHRError): never
  /**
   *
   * @summary Creates an access log
   * @param body
   */
  createAccessLog(body?: AccessLog): Promise<AccessLog>
  /**
   *
   * @summary Deletes an access log
   * @param accessLogIds
   */
  deleteAccessLog(accessLogIds: string): Promise<Array<DocIdentifier>>
  /**
   *
   * @summary List access logs found By Healthcare Party and secret foreign keyelementIds.
   * @param hcPartyId
   * @param secretFKeys
   */
  findAccessLogsByHCPartyPatientForeignKeys(
    hcPartyId: string,
    secretFKeys: string
  ): Promise<Array<AccessLog>>
  /**
   *
   * @summary Get Paginated List of Access logs
   * @param userId A User ID
   * @param accessType The type of access (COMPUTER or USER)
   * @param startDate The start search epoch
   * @param startKey The start key for pagination
   * @param startDocumentId A patient document ID
   * @param limit Number of rows
   * @param descending Descending order
   */
  findByUserAfterDate(
    userId: string,
    accessType?: string,
    startDate?: number,
    startKey?: string,
    startDocumentId?: string,
    limit?: number,
    descending?: boolean
  ): Promise<PaginatedListAccessLog>
  /**
   *
   * @summary Gets an access log
   * @param accessLogId
   */
  getAccessLog(accessLogId: string): Promise<AccessLog>
  /**
   *
   * @summary Lists access logs
   * @param fromEpoch
   * @param toEpoch
   * @param startKey
   * @param startDocumentId
   * @param limit
   * @param descending
   */
  listAccessLogs(
    fromEpoch?: number,
    toEpoch?: number,
    startKey?: number,
    startDocumentId?: string,
    limit?: number,
    descending?: boolean
  ): Promise<PaginatedListAccessLog>
  /**
   *
   * @summary Modifies an access log
   * @param body
   */
  modifyAccessLog(body?: AccessLog): Promise<AccessLog>
}
