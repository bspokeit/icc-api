/**
 * iCure Cloud API Documentation
 * Spring shop sample application
 *
 * OpenAPI spec version: v0.0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { XHR } from "./XHR"
import { Delegation } from "../model/Delegation"
import { DocIdentifier } from "../model/DocIdentifier"
import { FilterChainInvoice } from "../model/FilterChainInvoice"
import { IcureStub } from "../model/IcureStub"
import { Invoice } from "../model/Invoice"
import { InvoicingCode } from "../model/InvoicingCode"
import { LabelledOccurence } from "../model/LabelledOccurence"
import { ListOfIds } from "../model/ListOfIds"
import { PaginatedListInvoice } from "../model/PaginatedListInvoice"
export declare class IccInvoiceApi {
  host: string
  headers: Array<XHR.Header>
  fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>
  constructor(
    host: string,
    headers: any,
    fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>
  )
  setHeaders(h: Array<XHR.Header>): void
  handleError(e: XHR.XHRError): never
  /**
   *
   * @summary Gets all invoices for author at date
   * @param body
   * @param userId
   * @param type
   * @param sentMediumType
   * @param secretFKeys
   * @param insuranceId
   * @param invoiceId
   * @param gracePeriod
   */
  appendCodes(
    userId: string,
    type: string,
    sentMediumType: string,
    secretFKeys: string,
    insuranceId?: string,
    invoiceId?: string,
    gracePeriod?: number,
    body?: Array<InvoicingCode>
  ): Promise<Array<Invoice>>
  /**
   *
   * @summary Creates an invoice
   * @param body
   */
  createInvoice(body?: Invoice): Promise<Invoice>
  /**
   *
   * @summary Deletes an invoice
   * @param invoiceId
   */
  deleteInvoice(invoiceId: string): Promise<DocIdentifier>
  /**
   * Returns a list of invoices along with next start keys and Document ID. If the nextStartKey is Null it means that this is the last page.
   * @summary Filter invoices for the current user (HcParty)
   * @param body
   */
  filterInvoicesBy(body?: FilterChainInvoice): Promise<Array<Invoice>>
  /**
   *
   * @summary Gets all invoices for author at date
   * @param hcPartyId
   * @param fromDate
   * @param toDate
   * @param startKey The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key&#x27;s startKey
   * @param startDocumentId A patient document ID
   * @param limit Number of rows
   */
  findByAuthor(
    hcPartyId: string,
    fromDate?: number,
    toDate?: number,
    startKey?: string,
    startDocumentId?: string,
    limit?: number
  ): Promise<PaginatedListInvoice>
  /**
   * Keys have to delimited by coma
   * @summary List invoices found By Healthcare Party and secret foreign patient keys.
   * @param hcPartyId
   * @param secretFKeys
   */
  findInvoicesByHCPartyPatientForeignKeys(
    hcPartyId: string,
    secretFKeys: string
  ): Promise<Array<Invoice>>
  /**
   * Keys must be delimited by coma
   * @summary List helement stubs found By Healthcare Party and secret foreign keys.
   * @param hcPartyId
   * @param secretFKeys
   */
  findInvoicesDelegationsStubsByHCPartyPatientForeignKeys(
    hcPartyId: string,
    secretFKeys: string
  ): Promise<Array<IcureStub>>
  /**
   *
   * @summary Gets an invoice
   * @param invoiceId
   */
  getInvoice(invoiceId: string): Promise<Invoice>
  /**
   *
   * @summary Gets an invoice
   * @param body
   */
  getInvoices(body?: ListOfIds): Promise<Array<Invoice>>
  /**
   *
   * @summary Get the list of all used tarifications frequencies in invoices
   * @param minOccurences
   */
  getTarificationsCodesOccurences(minOccurences: number): Promise<Array<LabelledOccurence>>
  /**
   *
   * @summary Gets all invoices per status
   * @param body
   * @param status
   * @param from
   * @param to
   */
  listAllHcpsByStatus(
    status: string,
    from?: number,
    to?: number,
    body?: ListOfIds
  ): Promise<Array<Invoice>>
  /**
   *
   * @summary Gets all invoices for author at date
   * @param body
   */
  listByContactIds(body?: ListOfIds): Promise<Array<Invoice>>
  /**
   * Keys have to delimited by coma
   * @summary List invoices by groupId
   * @param hcPartyId
   * @param groupId
   */
  listByHcPartyGroupId(hcPartyId: string, groupId: string): Promise<Array<Invoice>>
  /**
   * Keys have to delimited by coma
   * @summary List invoices by type, sent or unsent
   * @param hcPartyId
   * @param sentMediumType
   * @param invoiceType
   * @param sent
   * @param from
   * @param to
   */
  listByHcPartySentMediumTypeInvoiceTypeSentDate(
    hcPartyId: string,
    sentMediumType: string,
    invoiceType: string,
    sent: boolean,
    from?: number,
    to?: number
  ): Promise<Array<Invoice>>
  /**
   *
   * @summary Get all invoices by author, by sending mode, by status and by date
   * @param hcPartyId
   * @param sendingMode
   * @param status
   * @param from
   * @param to
   */
  listByHcpartySendingModeStatusDate(
    hcPartyId: string,
    sendingMode?: string,
    status?: string,
    from?: number,
    to?: number
  ): Promise<Array<Invoice>>
  /**
   *
   * @summary Gets all invoices for author at date
   * @param invoiceIds
   */
  listByIds(invoiceIds: string): Promise<Array<Invoice>>
  /**
   *
   * @summary Gets all invoices for author at date
   * @param recipientIds
   */
  listByRecipientsIds(recipientIds: string): Promise<Array<Invoice>>
  /**
   *
   * @summary Gets all invoices for author at date
   * @param serviceIds
   */
  listByServiceIds(serviceIds: string): Promise<Array<Invoice>>
  /**
   *
   * @summary Gets all invoices for author at date
   * @param userIds
   */
  listToInsurances(userIds?: string): Promise<Array<Invoice>>
  /**
   *
   * @summary Gets all invoices for author at date
   * @param userIds
   */
  listToInsurancesUnsent(userIds?: string): Promise<Array<Invoice>>
  /**
   *
   * @summary Gets all invoices for author at date
   * @param hcPartyId
   */
  listToPatients(hcPartyId?: string): Promise<Array<Invoice>>
  /**
   *
   * @summary Gets all invoices for author at date
   * @param hcPartyId
   */
  listToPatientsUnsent(hcPartyId?: string): Promise<Array<Invoice>>
  /**
   *
   * @summary Gets all invoices for author at date
   * @param body
   * @param invoiceId
   */
  mergeTo(invoiceId: string, body?: ListOfIds): Promise<Invoice>
  /**
   *
   * @summary Modifies an invoice
   * @param body
   */
  modifyInvoice(body?: Invoice): Promise<Invoice>
  /**
   *
   * @summary Adds a delegation to a invoice
   * @param body
   * @param invoiceId
   */
  newInvoiceDelegations(invoiceId: string, body?: Array<Delegation>): Promise<Invoice>
  /**
   *
   * @summary Modifies an invoice
   * @param body
   */
  reassignInvoice(body?: Invoice): Promise<Invoice>
  /**
   *
   * @summary Gets all invoices for author at date
   * @param body
   * @param userId
   * @param serviceId
   * @param secretFKeys
   */
  removeCodes(
    userId: string,
    serviceId: string,
    secretFKeys: string,
    body?: Array<string>
  ): Promise<Array<Invoice>>
  /**
   * Keys must be delimited by coma
   * @summary Update delegations in healthElements.
   * @param body
   */
  setInvoicesDelegations(body?: Array<IcureStub>): Promise<Array<IcureStub>>
  /**
   *
   * @summary Gets all invoices for author at date
   * @param invoiceId
   * @param scheme
   * @param forcedValue
   */
  validate(invoiceId: string, scheme: string, forcedValue: string): Promise<Invoice>
}
