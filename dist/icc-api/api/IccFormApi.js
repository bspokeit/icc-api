"use strict"
Object.defineProperty(exports, "__esModule", { value: true })
/**
 * iCure Cloud API Documentation
 * Spring shop sample application
 *
 * OpenAPI spec version: v0.0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
const XHR_1 = require("./XHR")
const DocIdentifier_1 = require("../model/DocIdentifier")
const Form_1 = require("../model/Form")
const FormTemplate_1 = require("../model/FormTemplate")
const IcureStub_1 = require("../model/IcureStub")
class IccFormApi {
  constructor(host, headers, fetchImpl) {
    this.host = host
    this.headers = Object.keys(headers).map(k => new XHR_1.XHR.Header(k, headers[k]))
    this.fetchImpl = fetchImpl
  }
  setHeaders(h) {
    this.headers = h
  }
  handleError(e) {
    throw e
  }
  /**
   * Returns an instance of created form.
   * @summary Create a form with the current user
   * @param body
   */
  createForm(body) {
    let _body = null
    _body = body
    const _url = this.host + `/form` + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new Form_1.Form(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   * Returns an instance of created form template.
   * @summary Create a form template with the current user
   * @param body
   */
  createFormTemplate(body) {
    let _body = null
    _body = body
    const _url = this.host + `/form/template` + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new FormTemplate_1.FormTemplate(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Delete a form template
   * @param formTemplateId
   */
  deleteFormTemplate(formTemplateId) {
    let _body = null
    const _url =
      this.host +
      `/form/template/${encodeURIComponent(String(formTemplateId))}` +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    return XHR_1.XHR.sendCommand("DELETE", _url, headers, _body, this.fetchImpl)
      .then(doc => new DocIdentifier_1.DocIdentifier(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   * Response is a set containing the ID's of deleted forms.
   * @summary Delete forms.
   * @param formIds
   */
  deleteForms(formIds) {
    let _body = null
    const _url =
      this.host + `/form/${encodeURIComponent(String(formIds))}` + "?ts=" + new Date().getTime()
    let headers = this.headers
    return XHR_1.XHR.sendCommand("DELETE", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new DocIdentifier_1.DocIdentifier(it)))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Gets all form templates for current user
   * @param loadLayout
   */
  findFormTemplates(loadLayout) {
    let _body = null
    const _url =
      this.host +
      `/form/template` +
      "?ts=" +
      new Date().getTime() +
      (loadLayout ? "&loadLayout=" + encodeURIComponent(String(loadLayout)) : "")
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new FormTemplate_1.FormTemplate(it)))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Gets all form templates
   * @param specialityCode
   * @param loadLayout
   */
  findFormTemplatesBySpeciality(specialityCode, loadLayout) {
    let _body = null
    const _url =
      this.host +
      `/form/template/bySpecialty/${encodeURIComponent(String(specialityCode))}` +
      "?ts=" +
      new Date().getTime() +
      (loadLayout ? "&loadLayout=" + encodeURIComponent(String(loadLayout)) : "")
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new FormTemplate_1.FormTemplate(it)))
      .catch(err => this.handleError(err))
  }
  /**
   * Keys must be delimited by coma
   * @summary List forms found By Healthcare Party and secret foreign keys.
   * @param hcPartyId
   * @param secretFKeys
   * @param healthElementId
   * @param planOfActionId
   * @param formTemplateId
   */
  findFormsByHCPartyPatientForeignKeys(
    hcPartyId,
    secretFKeys,
    healthElementId,
    planOfActionId,
    formTemplateId
  ) {
    let _body = null
    const _url =
      this.host +
      `/form/byHcPartySecretForeignKeys` +
      "?ts=" +
      new Date().getTime() +
      (hcPartyId ? "&hcPartyId=" + encodeURIComponent(String(hcPartyId)) : "") +
      (secretFKeys ? "&secretFKeys=" + encodeURIComponent(String(secretFKeys)) : "") +
      (healthElementId ? "&healthElementId=" + encodeURIComponent(String(healthElementId)) : "") +
      (planOfActionId ? "&planOfActionId=" + encodeURIComponent(String(planOfActionId)) : "") +
      (formTemplateId ? "&formTemplateId=" + encodeURIComponent(String(formTemplateId)) : "")
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new Form_1.Form(it)))
      .catch(err => this.handleError(err))
  }
  /**
   * Keys must be delimited by coma
   * @summary List form stubs found By Healthcare Party and secret foreign keys.
   * @param hcPartyId
   * @param secretFKeys
   */
  findFormsDelegationsStubsByHCPartyPatientForeignKeys(hcPartyId, secretFKeys) {
    let _body = null
    const _url =
      this.host +
      `/form/byHcPartySecretForeignKeys/delegations` +
      "?ts=" +
      new Date().getTime() +
      (hcPartyId ? "&hcPartyId=" + encodeURIComponent(String(hcPartyId)) : "") +
      (secretFKeys ? "&secretFKeys=" + encodeURIComponent(String(secretFKeys)) : "")
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new IcureStub_1.IcureStub(it)))
      .catch(err => this.handleError(err))
  }
  /**
   * Keys must be delimited by coma
   * @summary Get a list of forms by ids
   * @param formId
   * @param hcPartyId
   */
  getChildrenForms(formId, hcPartyId) {
    let _body = null
    const _url =
      this.host +
      `/form/childrenOf/${encodeURIComponent(String(formId))}/${encodeURIComponent(
        String(hcPartyId)
      )}` +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new Form_1.Form(it)))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Gets a form
   * @param formId
   */
  getForm(formId) {
    let _body = null
    const _url =
      this.host + `/form/${encodeURIComponent(String(formId))}` + "?ts=" + new Date().getTime()
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new Form_1.Form(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Gets a form
   * @param externalUuid
   */
  getFormByExternalUuid(externalUuid) {
    let _body = null
    const _url =
      this.host +
      `/form/externaluuid/${encodeURIComponent(String(externalUuid))}` +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new Form_1.Form(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Gets a form template by guid
   * @param formTemplateId
   */
  getFormTemplate(formTemplateId) {
    let _body = null
    const _url =
      this.host +
      `/form/template/${encodeURIComponent(String(formTemplateId))}` +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new FormTemplate_1.FormTemplate(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Gets a form template
   * @param formTemplateGuid
   * @param specialityCode
   */
  getFormTemplatesByGuid(formTemplateGuid, specialityCode) {
    let _body = null
    const _url =
      this.host +
      `/form/template/${encodeURIComponent(String(specialityCode))}/guid/${encodeURIComponent(
        String(formTemplateGuid)
      )}` +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new FormTemplate_1.FormTemplate(it)))
      .catch(err => this.handleError(err))
  }
  /**
   * Keys must be delimited by coma
   * @summary Get a list of forms by ids
   * @param body
   */
  getForms(body) {
    let _body = null
    _body = body
    const _url = this.host + `/form/byIds` + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new Form_1.Form(it)))
      .catch(err => this.handleError(err))
  }
  /**
   * Returns the modified form.
   * @summary Modify a form
   * @param body
   */
  modifyForm(body) {
    let _body = null
    _body = body
    const _url = this.host + `/form` + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("PUT", _url, headers, _body, this.fetchImpl)
      .then(doc => new Form_1.Form(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   * Returns the modified forms.
   * @summary Modify a batch of forms
   * @param body
   */
  modifyForms(body) {
    let _body = null
    _body = body
    const _url = this.host + `/form/batch` + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("PUT", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new Form_1.Form(it)))
      .catch(err => this.handleError(err))
  }
  /**
   * It delegates a form to a healthcare party. Returns the form with the new delegations.
   * @summary Delegates a form to a healthcare party
   * @param body
   * @param formId
   */
  newFormDelegations(formId, body) {
    let _body = null
    _body = body
    const _url =
      this.host +
      `/form/delegate/${encodeURIComponent(String(formId))}` +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new Form_1.Form(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   * Keys must be delimited by coma
   * @summary Update delegations in form.
   * @param body
   */
  setFormsDelegations(body) {
    let _body = null
    _body = body
    const _url = this.host + `/form/delegations` + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new IcureStub_1.IcureStub(it)))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Update a form template's layout
   * @param formTemplateId
   */
  setTemplateAttachmentMulti(formTemplateId) {
    let _body = null
    const _url =
      this.host +
      `/form/template/${encodeURIComponent(String(formTemplateId))}/attachment/multipart` +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "multipart/form-data"))
    return XHR_1.XHR.sendCommand("PUT", _url, headers, _body, this.fetchImpl)
      .then(doc => JSON.parse(JSON.stringify(doc.body)))
      .catch(err => this.handleError(err))
  }
  /**
   * Returns an instance of created form template.
   * @summary Modify a form template with the current user
   * @param body
   * @param formTemplateId
   */
  updateFormTemplate(formTemplateId, body) {
    let _body = null
    _body = body
    const _url =
      this.host +
      `/form/template/${encodeURIComponent(String(formTemplateId))}` +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("PUT", _url, headers, _body, this.fetchImpl)
      .then(doc => new FormTemplate_1.FormTemplate(doc.body))
      .catch(err => this.handleError(err))
  }
}
exports.IccFormApi = IccFormApi
//# sourceMappingURL=IccFormApi.js.map
