"use strict"
Object.defineProperty(exports, "__esModule", { value: true })
/**
 * iCure Cloud API Documentation
 * Spring shop sample application
 *
 * OpenAPI spec version: v0.0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
const XHR_1 = require("./XHR")
const PaginatedListTarification_1 = require("../model/PaginatedListTarification")
const Tarification_1 = require("../model/Tarification")
class IccTarificationApi {
  constructor(host, headers, fetchImpl) {
    this.host = host
    this.headers = Object.keys(headers).map(k => new XHR_1.XHR.Header(k, headers[k]))
    this.fetchImpl = fetchImpl
  }
  setHeaders(h) {
    this.headers = h
  }
  handleError(e) {
    throw e
  }
  /**
   * Type, Tarification and Version are required.
   * @summary Create a Tarification
   * @param body
   */
  createTarification(body) {
    let _body = null
    _body = body
    const _url = this.host + `/tarification` + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new Tarification_1.Tarification(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   * Returns a list of tarifications matched with given input.
   * @summary Finding tarifications by tarification, type and version with pagination.
   * @param region
   * @param type
   * @param tarification
   * @param version
   * @param startDocumentId A tarification document ID
   * @param limit Number of rows
   */
  findPaginatedTarifications(region, type, tarification, version, startDocumentId, limit) {
    let _body = null
    const _url =
      this.host +
      `/tarification` +
      "?ts=" +
      new Date().getTime() +
      (region ? "&region=" + encodeURIComponent(String(region)) : "") +
      (type ? "&type=" + encodeURIComponent(String(type)) : "") +
      (tarification ? "&tarification=" + encodeURIComponent(String(tarification)) : "") +
      (version ? "&version=" + encodeURIComponent(String(version)) : "") +
      (startDocumentId ? "&startDocumentId=" + encodeURIComponent(String(startDocumentId)) : "") +
      (limit ? "&limit=" + encodeURIComponent(String(limit)) : "")
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new PaginatedListTarification_1.PaginatedListTarification(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   * Returns a list of tarifications matched with given input.
   * @summary Finding tarifications by tarification, type and version with pagination.
   * @param region
   * @param types
   * @param language
   * @param label
   * @param startDocumentId A tarification document ID
   * @param limit Number of rows
   */
  findPaginatedTarificationsByLabel(region, types, language, label, startDocumentId, limit) {
    let _body = null
    const _url =
      this.host +
      `/tarification/byLabel` +
      "?ts=" +
      new Date().getTime() +
      (region ? "&region=" + encodeURIComponent(String(region)) : "") +
      (types ? "&types=" + encodeURIComponent(String(types)) : "") +
      (language ? "&language=" + encodeURIComponent(String(language)) : "") +
      (label ? "&label=" + encodeURIComponent(String(label)) : "") +
      (startDocumentId ? "&startDocumentId=" + encodeURIComponent(String(startDocumentId)) : "") +
      (limit ? "&limit=" + encodeURIComponent(String(limit)) : "")
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new PaginatedListTarification_1.PaginatedListTarification(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   * Returns a list of tarifications matched with given input.
   * @summary Finding tarifications by tarification, type and version
   * @param region Tarification region
   * @param type Tarification type
   * @param tarification Tarification tarification
   * @param version Tarification version
   */
  findTarifications(region, type, tarification, version) {
    let _body = null
    const _url =
      this.host +
      `/tarification/byRegionTypeTarification` +
      "?ts=" +
      new Date().getTime() +
      (region ? "&region=" + encodeURIComponent(String(region)) : "") +
      (type ? "&type=" + encodeURIComponent(String(type)) : "") +
      (tarification ? "&tarification=" + encodeURIComponent(String(tarification)) : "") +
      (version ? "&version=" + encodeURIComponent(String(version)) : "")
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new Tarification_1.Tarification(it)))
      .catch(err => this.handleError(err))
  }
  /**
   * Get a tarification based on ID or (tarification,type,version) as query strings. (tarification,type,version) is unique.
   * @summary Get a tarification
   * @param tarificationId Tarification id
   */
  getTarification(tarificationId) {
    let _body = null
    const _url =
      this.host +
      `/tarification/${encodeURIComponent(String(tarificationId))}` +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new Tarification_1.Tarification(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   * Get a tarification based on ID or (tarification,type,version) as query strings. (tarification,type,version) is unique.
   * @summary Get a tarification
   * @param type Tarification type
   * @param tarification Tarification tarification
   * @param version Tarification version
   */
  getTarificationWithParts(type, tarification, version) {
    let _body = null
    const _url =
      this.host +
      `/tarification/${encodeURIComponent(String(type))}/${encodeURIComponent(
        String(tarification)
      )}/${encodeURIComponent(String(version))}` +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new Tarification_1.Tarification(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   * Keys must be delimited by coma
   * @summary Get a list of tarifications by ids
   * @param body
   */
  getTarifications(body) {
    let _body = null
    _body = body
    const _url = this.host + `/tarification/byIds` + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new Tarification_1.Tarification(it)))
      .catch(err => this.handleError(err))
  }
  /**
   * Modification of (type, tarification, version) is not allowed.
   * @summary Modify a tarification
   * @param body
   */
  modifyTarification(body) {
    let _body = null
    _body = body
    const _url = this.host + `/tarification` + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("PUT", _url, headers, _body, this.fetchImpl)
      .then(doc => new Tarification_1.Tarification(doc.body))
      .catch(err => this.handleError(err))
  }
}
exports.IccTarificationApi = IccTarificationApi
//# sourceMappingURL=IccTarificationApi.js.map
