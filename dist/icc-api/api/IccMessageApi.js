"use strict"
Object.defineProperty(exports, "__esModule", { value: true })
/**
 * iCure Cloud API Documentation
 * Spring shop sample application
 *
 * OpenAPI spec version: v0.0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
const XHR_1 = require("./XHR")
const DocIdentifier_1 = require("../model/DocIdentifier")
const IcureStub_1 = require("../model/IcureStub")
const Message_1 = require("../model/Message")
const PaginatedListMessage_1 = require("../model/PaginatedListMessage")
class IccMessageApi {
  constructor(host, headers, fetchImpl) {
    this.host = host
    this.headers = Object.keys(headers).map(k => new XHR_1.XHR.Header(k, headers[k]))
    this.fetchImpl = fetchImpl
  }
  setHeaders(h) {
    this.headers = h
  }
  handleError(e) {
    throw e
  }
  /**
   *
   * @summary Creates a message
   * @param body
   */
  createMessage(body) {
    let _body = null
    _body = body
    const _url = this.host + `/message` + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new Message_1.Message(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Deletes a message delegation
   * @param messageId
   * @param delegateId
   */
  deleteDelegation(messageId, delegateId) {
    let _body = null
    const _url =
      this.host +
      `/message/${encodeURIComponent(String(messageId))}/delegate/${encodeURIComponent(
        String(delegateId)
      )}` +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    return XHR_1.XHR.sendCommand("DELETE", _url, headers, _body, this.fetchImpl)
      .then(doc => new Message_1.Message(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Deletes multiple messages
   * @param messageIds
   */
  deleteMessages(messageIds) {
    let _body = null
    const _url =
      this.host +
      `/message/${encodeURIComponent(String(messageIds))}` +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    return XHR_1.XHR.sendCommand("DELETE", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new DocIdentifier_1.DocIdentifier(it)))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Deletes multiple messages
   * @param body
   */
  deleteMessagesBatch(body) {
    let _body = null
    _body = body
    const _url = this.host + `/message/delete/byIds` + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new DocIdentifier_1.DocIdentifier(it)))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Get all messages (paginated) for current HC Party
   * @param startKey
   * @param startDocumentId
   * @param limit
   */
  findMessages(startKey, startDocumentId, limit) {
    let _body = null
    const _url =
      this.host +
      `/message` +
      "?ts=" +
      new Date().getTime() +
      (startKey ? "&startKey=" + encodeURIComponent(String(startKey)) : "") +
      (startDocumentId ? "&startDocumentId=" + encodeURIComponent(String(startDocumentId)) : "") +
      (limit ? "&limit=" + encodeURIComponent(String(limit)) : "")
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new PaginatedListMessage_1.PaginatedListMessage(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Get all messages (paginated) for current HC Party and provided from address
   * @param fromAddress
   * @param startKey
   * @param startDocumentId
   * @param limit
   * @param hcpId
   */
  findMessagesByFromAddress(fromAddress, startKey, startDocumentId, limit, hcpId) {
    let _body = null
    const _url =
      this.host +
      `/message/byFromAddress` +
      "?ts=" +
      new Date().getTime() +
      (fromAddress ? "&fromAddress=" + encodeURIComponent(String(fromAddress)) : "") +
      (startKey ? "&startKey=" + encodeURIComponent(String(startKey)) : "") +
      (startDocumentId ? "&startDocumentId=" + encodeURIComponent(String(startDocumentId)) : "") +
      (limit ? "&limit=" + encodeURIComponent(String(limit)) : "") +
      (hcpId ? "&hcpId=" + encodeURIComponent(String(hcpId)) : "")
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new PaginatedListMessage_1.PaginatedListMessage(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   * Keys must be delimited by coma
   * @summary List messages found By Healthcare Party and secret foreign keys.
   * @param secretFKeys
   */
  findMessagesByHCPartyPatientForeignKeys(secretFKeys) {
    let _body = null
    const _url =
      this.host +
      `/message/byHcPartySecretForeignKeys` +
      "?ts=" +
      new Date().getTime() +
      (secretFKeys ? "&secretFKeys=" + encodeURIComponent(String(secretFKeys)) : "")
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new Message_1.Message(it)))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Get all messages (paginated) for current HC Party and provided to address
   * @param toAddress
   * @param startKey
   * @param startDocumentId
   * @param limit
   * @param reverse
   * @param hcpId
   */
  findMessagesByToAddress(toAddress, startKey, startDocumentId, limit, reverse, hcpId) {
    let _body = null
    const _url =
      this.host +
      `/message/byToAddress` +
      "?ts=" +
      new Date().getTime() +
      (toAddress ? "&toAddress=" + encodeURIComponent(String(toAddress)) : "") +
      (startKey ? "&startKey=" + encodeURIComponent(String(startKey)) : "") +
      (startDocumentId ? "&startDocumentId=" + encodeURIComponent(String(startDocumentId)) : "") +
      (limit ? "&limit=" + encodeURIComponent(String(limit)) : "") +
      (reverse ? "&reverse=" + encodeURIComponent(String(reverse)) : "") +
      (hcpId ? "&hcpId=" + encodeURIComponent(String(hcpId)) : "")
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new PaginatedListMessage_1.PaginatedListMessage(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Get all messages (paginated) for current HC Party and provided transportGuid
   * @param transportGuid
   * @param received
   * @param startKey
   * @param startDocumentId
   * @param limit
   * @param hcpId
   */
  findMessagesByTransportGuid(transportGuid, received, startKey, startDocumentId, limit, hcpId) {
    let _body = null
    const _url =
      this.host +
      `/message/byTransportGuid` +
      "?ts=" +
      new Date().getTime() +
      (transportGuid ? "&transportGuid=" + encodeURIComponent(String(transportGuid)) : "") +
      (received ? "&received=" + encodeURIComponent(String(received)) : "") +
      (startKey ? "&startKey=" + encodeURIComponent(String(startKey)) : "") +
      (startDocumentId ? "&startDocumentId=" + encodeURIComponent(String(startDocumentId)) : "") +
      (limit ? "&limit=" + encodeURIComponent(String(limit)) : "") +
      (hcpId ? "&hcpId=" + encodeURIComponent(String(hcpId)) : "")
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new PaginatedListMessage_1.PaginatedListMessage(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Get all messages starting by a prefix between two date
   * @param from
   * @param to
   * @param transportGuid
   * @param startKey
   * @param startDocumentId
   * @param limit
   * @param hcpId
   */
  findMessagesByTransportGuidSentDate(
    from,
    to,
    transportGuid,
    startKey,
    startDocumentId,
    limit,
    hcpId
  ) {
    let _body = null
    const _url =
      this.host +
      `/message/byTransportGuidSentDate` +
      "?ts=" +
      new Date().getTime() +
      (from ? "&from=" + encodeURIComponent(String(from)) : "") +
      (to ? "&to=" + encodeURIComponent(String(to)) : "") +
      (transportGuid ? "&transportGuid=" + encodeURIComponent(String(transportGuid)) : "") +
      (startKey ? "&startKey=" + encodeURIComponent(String(startKey)) : "") +
      (startDocumentId ? "&startDocumentId=" + encodeURIComponent(String(startDocumentId)) : "") +
      (limit ? "&limit=" + encodeURIComponent(String(limit)) : "") +
      (hcpId ? "&hcpId=" + encodeURIComponent(String(hcpId)) : "")
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new PaginatedListMessage_1.PaginatedListMessage(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Get children messages of provided message
   * @param messageId
   */
  getChildrenMessages(messageId) {
    let _body = null
    const _url =
      this.host +
      `/message/${encodeURIComponent(String(messageId))}/children` +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new Message_1.Message(it)))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Get children messages of provided message
   * @param body
   */
  getChildrenMessagesOfList(body) {
    let _body = null
    _body = body
    const _url = this.host + `/message/children/batch` + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new Message_1.Message(it)))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Gets a message
   * @param messageId
   */
  getMessage(messageId) {
    let _body = null
    const _url =
      this.host +
      `/message/${encodeURIComponent(String(messageId))}` +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new Message_1.Message(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Get children messages of provided message
   * @param body
   */
  listMessagesByInvoiceIds(body) {
    let _body = null
    _body = body
    const _url = this.host + `/message/byInvoiceId` + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new Message_1.Message(it)))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Updates a message
   * @param body
   */
  modifyMessage(body) {
    let _body = null
    _body = body
    const _url = this.host + `/message` + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("PUT", _url, headers, _body, this.fetchImpl)
      .then(doc => new Message_1.Message(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Adds a delegation to a message
   * @param body
   * @param messageId
   */
  newMessageDelegations(messageId, body) {
    let _body = null
    _body = body
    const _url =
      this.host +
      `/message/${encodeURIComponent(String(messageId))}/delegate` +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("PUT", _url, headers, _body, this.fetchImpl)
      .then(doc => new IcureStub_1.IcureStub(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Set read status for given list of messages
   * @param body
   */
  setMessagesReadStatus(body) {
    let _body = null
    _body = body
    const _url = this.host + `/message/readstatus` + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("PUT", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new Message_1.Message(it)))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Set status bits for given list of messages
   * @param body
   * @param status
   */
  setMessagesStatusBits(status, body) {
    let _body = null
    _body = body
    const _url =
      this.host +
      `/message/status/${encodeURIComponent(String(status))}` +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("PUT", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new Message_1.Message(it)))
      .catch(err => this.handleError(err))
  }
}
exports.IccMessageApi = IccMessageApi
//# sourceMappingURL=IccMessageApi.js.map
