"use strict"
Object.defineProperty(exports, "__esModule", { value: true })
/**
 * iCure Cloud API Documentation
 * Spring shop sample application
 *
 * OpenAPI spec version: v0.0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
const XHR_1 = require("./XHR")
const Classification_1 = require("../model/Classification")
const DocIdentifier_1 = require("../model/DocIdentifier")
const IcureStub_1 = require("../model/IcureStub")
class IccClassificationApi {
  constructor(host, headers, fetchImpl) {
    this.host = host
    this.headers = Object.keys(headers).map(k => new XHR_1.XHR.Header(k, headers[k]))
    this.fetchImpl = fetchImpl
  }
  setHeaders(h) {
    this.headers = h
  }
  handleError(e) {
    throw e
  }
  /**
   * Returns an instance of created classification Template.
   * @summary Create a classification with the current user
   * @param body
   */
  createClassification(body) {
    let _body = null
    _body = body
    const _url = this.host + `/classification` + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new Classification_1.Classification(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   * Response is a set containing the ID's of deleted classification Templates.
   * @summary Delete classification Templates.
   * @param classificationIds
   */
  deleteClassifications(classificationIds) {
    let _body = null
    const _url =
      this.host +
      `/classification/${encodeURIComponent(String(classificationIds))}` +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    return XHR_1.XHR.sendCommand("DELETE", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new DocIdentifier_1.DocIdentifier(it)))
      .catch(err => this.handleError(err))
  }
  /**
   * Keys hast to delimited by coma
   * @summary List classification Templates found By Healthcare Party and secret foreign keyelementIds.
   * @param hcPartyId
   * @param secretFKeys
   */
  findClassificationsByHCPartyPatientForeignKeys(hcPartyId, secretFKeys) {
    let _body = null
    const _url =
      this.host +
      `/classification/byHcPartySecretForeignKeys` +
      "?ts=" +
      new Date().getTime() +
      (hcPartyId ? "&hcPartyId=" + encodeURIComponent(String(hcPartyId)) : "") +
      (secretFKeys ? "&secretFKeys=" + encodeURIComponent(String(secretFKeys)) : "")
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new Classification_1.Classification(it)))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Get a classification Template
   * @param classificationId
   */
  getClassification(classificationId) {
    let _body = null
    const _url =
      this.host +
      `/classification/${encodeURIComponent(String(classificationId))}` +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new Classification_1.Classification(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   * Ids are seperated by a coma
   * @summary Get a list of classifications
   * @param ids
   */
  getClassificationByHcPartyId(ids) {
    let _body = null
    const _url =
      this.host +
      `/classification/byIds/${encodeURIComponent(String(ids))}` +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new Classification_1.Classification(it)))
      .catch(err => this.handleError(err))
  }
  /**
   * Returns the modified classification Template.
   * @summary Modify a classification Template
   * @param body
   */
  modifyClassification(body) {
    let _body = null
    _body = body
    const _url = this.host + `/classification` + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("PUT", _url, headers, _body, this.fetchImpl)
      .then(doc => new Classification_1.Classification(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   * It delegates a classification to a healthcare party (By current healthcare party). Returns the element with new delegations.
   * @summary Delegates a classification to a healthcare party
   * @param body
   * @param classificationId
   */
  newClassificationDelegations(classificationId, body) {
    let _body = null
    _body = body
    const _url =
      this.host +
      `/classification/${encodeURIComponent(String(classificationId))}/delegate` +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new Classification_1.Classification(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   * Keys must be delimited by coma
   * @summary Update delegations in classification
   * @param body
   */
  setClassificationsDelegations(body) {
    let _body = null
    _body = body
    const _url = this.host + `/classification/delegations` + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new IcureStub_1.IcureStub(it)))
      .catch(err => this.handleError(err))
  }
}
exports.IccClassificationApi = IccClassificationApi
//# sourceMappingURL=IccClassificationApi.js.map
