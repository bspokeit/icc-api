/**
 * iCure Cloud API Documentation
 * Spring shop sample application
 *
 * OpenAPI spec version: v0.0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { XHR } from "./XHR"
import { IndexingInfo } from "../model/IndexingInfo"
import { ReplicationInfo } from "../model/ReplicationInfo"
import { Unit } from "../model/Unit"
import { User } from "../model/User"
export declare class IccIcureApi {
  host: string
  headers: Array<XHR.Header>
  fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>
  constructor(
    host: string,
    headers: any,
    fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>
  )
  setHeaders(h: Array<XHR.Header>): void
  handleError(e: XHR.XHRError): never
  /**
   *
   * @summary Get index info
   */
  getIndexingInfo(): Promise<IndexingInfo>
  /**
   *
   * @summary Get process info
   */
  getProcessInfo(): Promise<string>
  /**
   *
   * @summary Get property types
   * @param type
   */
  getPropertyTypes(type: string): Promise<Array<string>>
  /**
   *
   * @summary Get index info
   */
  getReplicationInfo(): Promise<ReplicationInfo>
  /**
   *
   * @summary Get users stubs
   */
  getUsers(): Promise<Array<User>>
  /**
   *
   * @summary Get version
   */
  getVersion(): Promise<string>
  /**
   *
   * @summary Check if a patient exists
   */
  isPatientReady(): Promise<string>
  /**
   *
   * @summary Check if a user exists
   */
  isReady(): Promise<string>
  /**
   *
   * @summary Resolve contacts conflicts
   */
  resolveContactsConflicts(): Promise<Unit>
  /**
   *
   * @summary resolve documents conflicts
   * @param ids
   */
  resolveDocumentsConflicts(ids?: string): Promise<Unit>
  /**
   *
   * @summary resolve forms conflicts
   */
  resolveFormsConflicts(): Promise<Unit>
  /**
   *
   * @summary resolve health elements conflicts
   */
  resolveHealthElementsConflicts(): Promise<Unit>
  /**
   *
   * @summary resolve invoices conflicts
   */
  resolveInvoicesConflicts(): Promise<Unit>
  /**
   *
   * @summary resolve messages conflicts
   */
  resolveMessagesConflicts(): Promise<Unit>
  /**
   *
   * @summary Resolve patients conflicts
   */
  resolvePatientsConflicts(): Promise<Unit>
  /**
   *
   * @summary Force update design doc
   * @param entityName
   * @param warmup
   */
  updateDesignDoc(entityName: string, warmup?: boolean): Promise<boolean>
}
