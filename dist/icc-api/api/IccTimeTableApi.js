"use strict"
Object.defineProperty(exports, "__esModule", { value: true })
/**
 * iCure Cloud API Documentation
 * Spring shop sample application
 *
 * OpenAPI spec version: v0.0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
const XHR_1 = require("./XHR")
const DocIdentifier_1 = require("../model/DocIdentifier")
const TimeTable_1 = require("../model/TimeTable")
class IccTimeTableApi {
  constructor(host, headers, fetchImpl) {
    this.host = host
    this.headers = Object.keys(headers).map(k => new XHR_1.XHR.Header(k, headers[k]))
    this.fetchImpl = fetchImpl
  }
  setHeaders(h) {
    this.headers = h
  }
  handleError(e) {
    throw e
  }
  /**
   *
   * @summary Creates a timeTable
   * @param body
   */
  createTimeTable(body) {
    let _body = null
    _body = body
    const _url = this.host + `/timeTable` + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new TimeTable_1.TimeTable(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Deletes an timeTable
   * @param timeTableIds
   */
  deleteTimeTable(timeTableIds) {
    let _body = null
    const _url =
      this.host +
      `/timeTable/${encodeURIComponent(String(timeTableIds))}` +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    return XHR_1.XHR.sendCommand("DELETE", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new DocIdentifier_1.DocIdentifier(it)))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Gets a timeTable
   * @param timeTableId
   */
  getTimeTable(timeTableId) {
    let _body = null
    const _url =
      this.host +
      `/timeTable/${encodeURIComponent(String(timeTableId))}` +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new TimeTable_1.TimeTable(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Get TimeTables by AgendaId
   * @param agendaId
   */
  getTimeTablesByAgendaId(agendaId) {
    let _body = null
    const _url =
      this.host +
      `/timeTable/byAgendaId` +
      "?ts=" +
      new Date().getTime() +
      (agendaId ? "&agendaId=" + encodeURIComponent(String(agendaId)) : "")
    let headers = this.headers
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new TimeTable_1.TimeTable(it)))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Get TimeTables by Period and AgendaId
   * @param startDate
   * @param endDate
   * @param agendaId
   */
  getTimeTablesByPeriodAndAgendaId(startDate, endDate, agendaId) {
    let _body = null
    const _url =
      this.host +
      `/timeTable/byPeriodAndAgendaId` +
      "?ts=" +
      new Date().getTime() +
      (startDate ? "&startDate=" + encodeURIComponent(String(startDate)) : "") +
      (endDate ? "&endDate=" + encodeURIComponent(String(endDate)) : "") +
      (agendaId ? "&agendaId=" + encodeURIComponent(String(agendaId)) : "")
    let headers = this.headers
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new TimeTable_1.TimeTable(it)))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Modifies an timeTable
   * @param body
   */
  modifyTimeTable(body) {
    let _body = null
    _body = body
    const _url = this.host + `/timeTable` + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("PUT", _url, headers, _body, this.fetchImpl)
      .then(doc => new TimeTable_1.TimeTable(doc.body))
      .catch(err => this.handleError(err))
  }
}
exports.IccTimeTableApi = IccTimeTableApi
//# sourceMappingURL=IccTimeTableApi.js.map
