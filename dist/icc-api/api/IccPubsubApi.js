"use strict"
Object.defineProperty(exports, "__esModule", { value: true })
/**
 * iCure Cloud API Documentation
 * Spring shop sample application
 *
 * OpenAPI spec version: v0.0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
const XHR_1 = require("./XHR")
class IccPubsubApi {
  constructor(host, headers, fetchImpl) {
    this.host = host
    this.headers = Object.keys(headers).map(k => new XHR_1.XHR.Header(k, headers[k]))
    this.fetchImpl = fetchImpl
  }
  setHeaders(h) {
    this.headers = h
  }
  handleError(e) {
    throw e
  }
  /**
   * Offer auth data on previously agreed on secret bucket, data should be encrypted
   * @summary Offer auth data on secret bucket
   * @param body
   * @param bucket
   */
  offerAuth(bucket, body) {
    let _body = null
    _body = body
    const _url =
      this.host +
      `/pubsub/auth/${encodeURIComponent(String(bucket))}` +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/octet-stream"))
    return XHR_1.XHR.sendCommand("PUT", _url, headers, _body, this.fetchImpl)
      .then(doc => JSON.parse(JSON.stringify(doc.body)))
      .catch(err => this.handleError(err))
  }
  /**
   * Publish value with key
   * @summary publish data
   * @param body
   * @param key
   */
  pub(key, body) {
    let _body = null
    _body = body
    const _url =
      this.host + `/pubsub/pub/${encodeURIComponent(String(key))}` + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/octet-stream"))
    return XHR_1.XHR.sendCommand("PUT", _url, headers, _body, this.fetchImpl)
      .then(doc => JSON.parse(JSON.stringify(doc.body)))
      .catch(err => this.handleError(err))
  }
  /**
   * Recover auth data from bucket, data should be encrypted
   * @summary Recover auth data from secret bucket
   * @param bucket
   */
  recoverAuth(bucket) {
    let _body = null
    const _url =
      this.host +
      `/pubsub/auth/recover/${encodeURIComponent(String(bucket))}` +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body)
      .catch(err => this.handleError(err))
  }
  /**
   * Try to get published data
   * @summary subscribe to data
   * @param key
   */
  sub(key) {
    let _body = null
    const _url =
      this.host + `/pubsub/sub/${encodeURIComponent(String(key))}` + "?ts=" + new Date().getTime()
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body)
      .catch(err => this.handleError(err))
  }
}
exports.IccPubsubApi = IccPubsubApi
//# sourceMappingURL=IccPubsubApi.js.map
