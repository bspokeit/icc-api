"use strict"
Object.defineProperty(exports, "__esModule", { value: true })
/**
 * iCure Cloud API Documentation
 * Spring shop sample application
 *
 * OpenAPI spec version: v0.0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
const XHR_1 = require("./XHR")
const AccessLog_1 = require("../model/AccessLog")
const DocIdentifier_1 = require("../model/DocIdentifier")
const PaginatedListAccessLog_1 = require("../model/PaginatedListAccessLog")
class IccAccesslogApi {
  constructor(host, headers, fetchImpl) {
    this.host = host
    this.headers = Object.keys(headers).map(k => new XHR_1.XHR.Header(k, headers[k]))
    this.fetchImpl = fetchImpl
  }
  setHeaders(h) {
    this.headers = h
  }
  handleError(e) {
    throw e
  }
  /**
   *
   * @summary Creates an access log
   * @param body
   */
  createAccessLog(body) {
    let _body = null
    _body = body
    const _url = this.host + `/accesslog` + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new AccessLog_1.AccessLog(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Deletes an access log
   * @param accessLogIds
   */
  deleteAccessLog(accessLogIds) {
    let _body = null
    const _url =
      this.host +
      `/accesslog/${encodeURIComponent(String(accessLogIds))}` +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    return XHR_1.XHR.sendCommand("DELETE", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new DocIdentifier_1.DocIdentifier(it)))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary List access logs found By Healthcare Party and secret foreign keyelementIds.
   * @param hcPartyId
   * @param secretFKeys
   */
  findAccessLogsByHCPartyPatientForeignKeys(hcPartyId, secretFKeys) {
    let _body = null
    const _url =
      this.host +
      `/accesslog/byHcPartySecretForeignKeys` +
      "?ts=" +
      new Date().getTime() +
      (hcPartyId ? "&hcPartyId=" + encodeURIComponent(String(hcPartyId)) : "") +
      (secretFKeys ? "&secretFKeys=" + encodeURIComponent(String(secretFKeys)) : "")
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new AccessLog_1.AccessLog(it)))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Get Paginated List of Access logs
   * @param userId A User ID
   * @param accessType The type of access (COMPUTER or USER)
   * @param startDate The start search epoch
   * @param startKey The start key for pagination
   * @param startDocumentId A patient document ID
   * @param limit Number of rows
   * @param descending Descending order
   */
  findByUserAfterDate(userId, accessType, startDate, startKey, startDocumentId, limit, descending) {
    let _body = null
    const _url =
      this.host +
      `/accesslog/byUser` +
      "?ts=" +
      new Date().getTime() +
      (userId ? "&userId=" + encodeURIComponent(String(userId)) : "") +
      (accessType ? "&accessType=" + encodeURIComponent(String(accessType)) : "") +
      (startDate ? "&startDate=" + encodeURIComponent(String(startDate)) : "") +
      (startKey ? "&startKey=" + encodeURIComponent(String(startKey)) : "") +
      (startDocumentId ? "&startDocumentId=" + encodeURIComponent(String(startDocumentId)) : "") +
      (limit ? "&limit=" + encodeURIComponent(String(limit)) : "") +
      (descending ? "&descending=" + encodeURIComponent(String(descending)) : "")
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new PaginatedListAccessLog_1.PaginatedListAccessLog(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Gets an access log
   * @param accessLogId
   */
  getAccessLog(accessLogId) {
    let _body = null
    const _url =
      this.host +
      `/accesslog/${encodeURIComponent(String(accessLogId))}` +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new AccessLog_1.AccessLog(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Lists access logs
   * @param fromEpoch
   * @param toEpoch
   * @param startKey
   * @param startDocumentId
   * @param limit
   * @param descending
   */
  listAccessLogs(fromEpoch, toEpoch, startKey, startDocumentId, limit, descending) {
    let _body = null
    const _url =
      this.host +
      `/accesslog` +
      "?ts=" +
      new Date().getTime() +
      (fromEpoch ? "&fromEpoch=" + encodeURIComponent(String(fromEpoch)) : "") +
      (toEpoch ? "&toEpoch=" + encodeURIComponent(String(toEpoch)) : "") +
      (startKey ? "&startKey=" + encodeURIComponent(String(startKey)) : "") +
      (startDocumentId ? "&startDocumentId=" + encodeURIComponent(String(startDocumentId)) : "") +
      (limit ? "&limit=" + encodeURIComponent(String(limit)) : "") +
      (descending ? "&descending=" + encodeURIComponent(String(descending)) : "")
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new PaginatedListAccessLog_1.PaginatedListAccessLog(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Modifies an access log
   * @param body
   */
  modifyAccessLog(body) {
    let _body = null
    _body = body
    const _url = this.host + `/accesslog` + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("PUT", _url, headers, _body, this.fetchImpl)
      .then(doc => new AccessLog_1.AccessLog(doc.body))
      .catch(err => this.handleError(err))
  }
}
exports.IccAccesslogApi = IccAccesslogApi
//# sourceMappingURL=IccAccesslogApi.js.map
