"use strict"
Object.defineProperty(exports, "__esModule", { value: true })
/**
 * iCure Cloud API Documentation
 * Spring shop sample application
 *
 * OpenAPI spec version: v0.0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
const XHR_1 = require("./XHR")
const IndexingInfo_1 = require("../model/IndexingInfo")
const ReplicationInfo_1 = require("../model/ReplicationInfo")
const Unit_1 = require("../model/Unit")
const User_1 = require("../model/User")
class IccIcureApi {
  constructor(host, headers, fetchImpl) {
    this.host = host
    this.headers = Object.keys(headers).map(k => new XHR_1.XHR.Header(k, headers[k]))
    this.fetchImpl = fetchImpl
  }
  setHeaders(h) {
    this.headers = h
  }
  handleError(e) {
    throw e
  }
  /**
   *
   * @summary Get index info
   */
  getIndexingInfo() {
    let _body = null
    const _url = this.host + `/icure/i` + "?ts=" + new Date().getTime()
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new IndexingInfo_1.IndexingInfo(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Get process info
   */
  getProcessInfo() {
    let _body = null
    const _url = this.host + `/icure/p` + "?ts=" + new Date().getTime()
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => JSON.parse(JSON.stringify(doc.body)))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Get property types
   * @param type
   */
  getPropertyTypes(type) {
    let _body = null
    const _url =
      this.host +
      `/icure/propertytypes/${encodeURIComponent(String(type))}` +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => JSON.parse(JSON.stringify(it))))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Get index info
   */
  getReplicationInfo() {
    let _body = null
    const _url = this.host + `/icure/r` + "?ts=" + new Date().getTime()
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new ReplicationInfo_1.ReplicationInfo(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Get users stubs
   */
  getUsers() {
    let _body = null
    const _url = this.host + `/icure/u` + "?ts=" + new Date().getTime()
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new User_1.User(it)))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Get version
   */
  getVersion() {
    let _body = null
    const _url = this.host + `/icure/v` + "?ts=" + new Date().getTime()
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => JSON.parse(JSON.stringify(doc.body)))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Check if a patient exists
   */
  isPatientReady() {
    let _body = null
    const _url = this.host + `/icure/pok` + "?ts=" + new Date().getTime()
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => JSON.parse(JSON.stringify(doc.body)))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Check if a user exists
   */
  isReady() {
    let _body = null
    const _url = this.host + `/icure/ok` + "?ts=" + new Date().getTime()
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => JSON.parse(JSON.stringify(doc.body)))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Resolve contacts conflicts
   */
  resolveContactsConflicts() {
    let _body = null
    const _url = this.host + `/icure/conflicts/contact` + "?ts=" + new Date().getTime()
    let headers = this.headers
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new Unit_1.Unit(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary resolve documents conflicts
   * @param ids
   */
  resolveDocumentsConflicts(ids) {
    let _body = null
    const _url =
      this.host +
      `/icure/conflicts/document` +
      "?ts=" +
      new Date().getTime() +
      (ids ? "&ids=" + encodeURIComponent(String(ids)) : "")
    let headers = this.headers
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new Unit_1.Unit(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary resolve forms conflicts
   */
  resolveFormsConflicts() {
    let _body = null
    const _url = this.host + `/icure/conflicts/form` + "?ts=" + new Date().getTime()
    let headers = this.headers
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new Unit_1.Unit(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary resolve health elements conflicts
   */
  resolveHealthElementsConflicts() {
    let _body = null
    const _url = this.host + `/icure/conflicts/healthelement` + "?ts=" + new Date().getTime()
    let headers = this.headers
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new Unit_1.Unit(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary resolve invoices conflicts
   */
  resolveInvoicesConflicts() {
    let _body = null
    const _url = this.host + `/icure/conflicts/invoice` + "?ts=" + new Date().getTime()
    let headers = this.headers
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new Unit_1.Unit(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary resolve messages conflicts
   */
  resolveMessagesConflicts() {
    let _body = null
    const _url = this.host + `/icure/conflicts/message` + "?ts=" + new Date().getTime()
    let headers = this.headers
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new Unit_1.Unit(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Resolve patients conflicts
   */
  resolvePatientsConflicts() {
    let _body = null
    const _url = this.host + `/icure/conflicts/patient` + "?ts=" + new Date().getTime()
    let headers = this.headers
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new Unit_1.Unit(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Force update design doc
   * @param entityName
   * @param warmup
   */
  updateDesignDoc(entityName, warmup) {
    let _body = null
    const _url =
      this.host +
      `/icure/dd/${encodeURIComponent(String(entityName))}` +
      "?ts=" +
      new Date().getTime() +
      (warmup ? "&warmup=" + encodeURIComponent(String(warmup)) : "")
    let headers = this.headers
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => JSON.parse(JSON.stringify(doc.body)))
      .catch(err => this.handleError(err))
  }
}
exports.IccIcureApi = IccIcureApi
//# sourceMappingURL=IccIcureApi.js.map
