/**
 * iCure Cloud API Documentation
 * Spring shop sample application
 *
 * OpenAPI spec version: v0.0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { XHR } from "./XHR"
import { Delegation } from "../model/Delegation"
import { DocIdentifier } from "../model/DocIdentifier"
import { IcureStub } from "../model/IcureStub"
import { ListOfIds } from "../model/ListOfIds"
import { Message } from "../model/Message"
import { MessagesReadStatusUpdate } from "../model/MessagesReadStatusUpdate"
import { PaginatedListMessage } from "../model/PaginatedListMessage"
export declare class IccMessageApi {
  host: string
  headers: Array<XHR.Header>
  fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>
  constructor(
    host: string,
    headers: any,
    fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>
  )
  setHeaders(h: Array<XHR.Header>): void
  handleError(e: XHR.XHRError): never
  /**
   *
   * @summary Creates a message
   * @param body
   */
  createMessage(body?: Message): Promise<Message>
  /**
   *
   * @summary Deletes a message delegation
   * @param messageId
   * @param delegateId
   */
  deleteDelegation(messageId: string, delegateId: string): Promise<Message>
  /**
   *
   * @summary Deletes multiple messages
   * @param messageIds
   */
  deleteMessages(messageIds: string): Promise<Array<DocIdentifier>>
  /**
   *
   * @summary Deletes multiple messages
   * @param body
   */
  deleteMessagesBatch(body?: ListOfIds): Promise<Array<DocIdentifier>>
  /**
   *
   * @summary Get all messages (paginated) for current HC Party
   * @param startKey
   * @param startDocumentId
   * @param limit
   */
  findMessages(
    startKey?: string,
    startDocumentId?: string,
    limit?: number
  ): Promise<PaginatedListMessage>
  /**
   *
   * @summary Get all messages (paginated) for current HC Party and provided from address
   * @param fromAddress
   * @param startKey
   * @param startDocumentId
   * @param limit
   * @param hcpId
   */
  findMessagesByFromAddress(
    fromAddress?: string,
    startKey?: string,
    startDocumentId?: string,
    limit?: number,
    hcpId?: string
  ): Promise<PaginatedListMessage>
  /**
   * Keys must be delimited by coma
   * @summary List messages found By Healthcare Party and secret foreign keys.
   * @param secretFKeys
   */
  findMessagesByHCPartyPatientForeignKeys(secretFKeys: string): Promise<Array<Message>>
  /**
   *
   * @summary Get all messages (paginated) for current HC Party and provided to address
   * @param toAddress
   * @param startKey
   * @param startDocumentId
   * @param limit
   * @param reverse
   * @param hcpId
   */
  findMessagesByToAddress(
    toAddress?: string,
    startKey?: string,
    startDocumentId?: string,
    limit?: number,
    reverse?: boolean,
    hcpId?: string
  ): Promise<PaginatedListMessage>
  /**
   *
   * @summary Get all messages (paginated) for current HC Party and provided transportGuid
   * @param transportGuid
   * @param received
   * @param startKey
   * @param startDocumentId
   * @param limit
   * @param hcpId
   */
  findMessagesByTransportGuid(
    transportGuid?: string,
    received?: boolean,
    startKey?: string,
    startDocumentId?: string,
    limit?: number,
    hcpId?: string
  ): Promise<PaginatedListMessage>
  /**
   *
   * @summary Get all messages starting by a prefix between two date
   * @param from
   * @param to
   * @param transportGuid
   * @param startKey
   * @param startDocumentId
   * @param limit
   * @param hcpId
   */
  findMessagesByTransportGuidSentDate(
    from?: number,
    to?: number,
    transportGuid?: string,
    startKey?: string,
    startDocumentId?: string,
    limit?: number,
    hcpId?: string
  ): Promise<PaginatedListMessage>
  /**
   *
   * @summary Get children messages of provided message
   * @param messageId
   */
  getChildrenMessages(messageId: string): Promise<Array<Message>>
  /**
   *
   * @summary Get children messages of provided message
   * @param body
   */
  getChildrenMessagesOfList(body?: ListOfIds): Promise<Array<Message>>
  /**
   *
   * @summary Gets a message
   * @param messageId
   */
  getMessage(messageId: string): Promise<Message>
  /**
   *
   * @summary Get children messages of provided message
   * @param body
   */
  listMessagesByInvoiceIds(body?: ListOfIds): Promise<Array<Message>>
  /**
   *
   * @summary Updates a message
   * @param body
   */
  modifyMessage(body?: Message): Promise<Message>
  /**
   *
   * @summary Adds a delegation to a message
   * @param body
   * @param messageId
   */
  newMessageDelegations(messageId: string, body?: Array<Delegation>): Promise<IcureStub>
  /**
   *
   * @summary Set read status for given list of messages
   * @param body
   */
  setMessagesReadStatus(body?: MessagesReadStatusUpdate): Promise<Array<Message>>
  /**
   *
   * @summary Set status bits for given list of messages
   * @param body
   * @param status
   */
  setMessagesStatusBits(status: number, body?: ListOfIds): Promise<Array<Message>>
}
