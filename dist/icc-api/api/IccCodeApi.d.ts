/**
 * iCure Cloud API Documentation
 * Spring shop sample application
 *
 * OpenAPI spec version: v0.0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { XHR } from "./XHR"
import { Code } from "../model/Code"
import { FilterChainCode } from "../model/FilterChainCode"
import { PaginatedListCode } from "../model/PaginatedListCode"
export declare class IccCodeApi {
  host: string
  headers: Array<XHR.Header>
  fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>
  constructor(
    host: string,
    headers: any,
    fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>
  )
  setHeaders(h: Array<XHR.Header>): void
  handleError(e: XHR.XHRError): never
  /**
   * Type, Code and Version are required.
   * @summary Create a Code
   * @param body
   */
  createCode(body?: Code): Promise<Code>
  /**
   * Returns a list of codes along with next start keys and Document ID. If the nextStartKey is Null it means that this is the last page.
   * @summary Filter codes
   * @param body
   * @param startKey The start key for pagination, depends on the filters used
   * @param startDocumentId A patient document ID
   * @param limit Number of rows
   * @param skip Skip rows
   * @param sort Sort key
   * @param desc Descending
   */
  filterCodesBy(
    startKey?: string,
    startDocumentId?: string,
    limit?: number,
    skip?: number,
    sort?: string,
    desc?: boolean,
    body?: FilterChainCode
  ): Promise<PaginatedListCode>
  /**
   * Returns a list of code types matched with given input.
   * @summary Finding code types.
   * @param region Code region
   * @param type Code type
   */
  findCodeTypes(region?: string, type?: string): Promise<Array<string>>
  /**
   * Returns a list of codes matched with given input.
   * @summary Finding codes by code, type and version
   * @param region Code region
   * @param type Code type
   * @param code Code code
   * @param version Code version
   */
  findCodes(region?: string, type?: string, code?: string, version?: string): Promise<Array<Code>>
  /**
   * Returns a list of codes matched with given input.
   * @summary Finding codes by code, type and version with pagination.
   * @param region
   * @param type
   * @param code
   * @param version
   * @param startKey The start key for pagination
   * @param startDocumentId A code document ID
   * @param limit Number of rows
   */
  findPaginatedCodes(
    region?: string,
    type?: string,
    code?: string,
    version?: string,
    startKey?: string,
    startDocumentId?: string,
    limit?: number
  ): Promise<PaginatedListCode>
  /**
   * Returns a list of codes matched with given input. If several types are provided, pagination is not supported
   * @summary Finding codes by code, type and version with pagination.
   * @param region
   * @param types
   * @param language
   * @param label
   * @param startKey The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key&#x27;s startKey
   * @param startDocumentId A code document ID
   * @param limit Number of rows
   */
  findPaginatedCodesByLabel(
    region?: string,
    types?: string,
    language?: string,
    label?: string,
    startKey?: string,
    startDocumentId?: string,
    limit?: number
  ): Promise<PaginatedListCode>
  /**
   * Returns a list of codes matched with given input.
   * @summary Finding codes by code, type and version with pagination.
   * @param linkType
   * @param linkedId
   * @param startKey The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key&#x27;s startKey
   * @param startDocumentId A code document ID
   * @param limit Number of rows
   */
  findPaginatedCodesWithLink(
    linkType: string,
    linkedId?: string,
    startKey?: string,
    startDocumentId?: string,
    limit?: number
  ): Promise<PaginatedListCode>
  /**
   * Returns a list of tag types matched with given input.
   * @summary Finding tag types.
   * @param region Code region
   * @param type Code type
   */
  findTagTypes(region?: string, type?: string): Promise<Array<string>>
  /**
   * Get a code based on ID or (code,type,version) as query strings. (code,type,version) is unique.
   * @summary Get a code
   * @param codeId Code id
   */
  getCode(codeId: string): Promise<Code>
  /**
   * Get a code based on ID or (code,type,version) as query strings. (code,type,version) is unique.
   * @summary Get a code
   * @param type Code type
   * @param code Code code
   * @param version Code version
   */
  getCodeWithParts(type: string, code: string, version: string): Promise<Code>
  /**
   * Keys must be delimited by coma
   * @summary Get a list of codes by ids
   * @param codeIds
   */
  getCodes(codeIds: string): Promise<Array<Code>>
  /**
   * Modification of (type, code, version) is not allowed.
   * @summary Modify a code
   * @param body
   */
  modifyCode(body?: Code): Promise<Code>
}
