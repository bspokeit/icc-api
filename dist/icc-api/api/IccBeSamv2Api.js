"use strict"
Object.defineProperty(exports, "__esModule", { value: true })
/**
 * iCure Cloud API Documentation
 * Spring shop sample application
 *
 * OpenAPI spec version: v0.0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
const XHR_1 = require("./XHR")
const Amp_1 = require("../model/Amp")
const Nmp_1 = require("../model/Nmp")
const PaginatedListAmp_1 = require("../model/PaginatedListAmp")
const PaginatedListNmp_1 = require("../model/PaginatedListNmp")
const PaginatedListVmp_1 = require("../model/PaginatedListVmp")
const PaginatedListVmpGroup_1 = require("../model/PaginatedListVmpGroup")
const PharmaceuticalForm_1 = require("../model/PharmaceuticalForm")
const SamVersion_1 = require("../model/SamVersion")
const Substance_1 = require("../model/Substance")
const Vmp_1 = require("../model/Vmp")
const VmpGroup_1 = require("../model/VmpGroup")
class IccBeSamv2Api {
  constructor(host, headers, fetchImpl) {
    this.host = host
    this.headers = Object.keys(headers).map(k => new XHR_1.XHR.Header(k, headers[k]))
    this.fetchImpl = fetchImpl
  }
  setHeaders(h) {
    this.headers = h
  }
  handleError(e) {
    throw e
  }
  /**
   * Returns a list of amps matched with given input. If several types are provided, paginantion is not supported
   * @summary Finding AMPs by dmpp code
   * @param dmppCode dmppCode
   */
  findAmpsByDmppCode(dmppCode) {
    let _body = null
    const _url =
      this.host +
      `/be_samv2/amp/byDmppCode/${encodeURIComponent(String(dmppCode))}` +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new Amp_1.Amp(it)))
      .catch(err => this.handleError(err))
  }
  /**
   * Returns a list of codes matched with given input. If several types are provided, paginantion is not supported
   * @summary Finding AMPs by atc code with pagination.
   * @param atcCode atcCode
   * @param startKey The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key&#x27;s startKey
   * @param startDocumentId A amp document ID
   * @param limit Number of rows
   */
  findPaginatedAmpsByAtc(atcCode, startKey, startDocumentId, limit) {
    let _body = null
    const _url =
      this.host +
      `/be_samv2/vmp/byAtc/${encodeURIComponent(String(atcCode))}` +
      "?ts=" +
      new Date().getTime() +
      (startKey ? "&startKey=" + encodeURIComponent(String(startKey)) : "") +
      (startDocumentId ? "&startDocumentId=" + encodeURIComponent(String(startDocumentId)) : "") +
      (limit ? "&limit=" + encodeURIComponent(String(limit)) : "")
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new PaginatedListAmp_1.PaginatedListAmp(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   * Returns a list of codes matched with given input. If several types are provided, paginantion is not supported
   * @summary Finding AMPs by group with pagination.
   * @param vmpgCode vmpgCode
   * @param startKey The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key&#x27;s startKey
   * @param startDocumentId A vmp document ID
   * @param limit Number of rows
   */
  findPaginatedAmpsByGroupCode(vmpgCode, startKey, startDocumentId, limit) {
    let _body = null
    const _url =
      this.host +
      `/be_samv2/amp/byGroupCode/${encodeURIComponent(String(vmpgCode))}` +
      "?ts=" +
      new Date().getTime() +
      (startKey ? "&startKey=" + encodeURIComponent(String(startKey)) : "") +
      (startDocumentId ? "&startDocumentId=" + encodeURIComponent(String(startDocumentId)) : "") +
      (limit ? "&limit=" + encodeURIComponent(String(limit)) : "")
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new PaginatedListAmp_1.PaginatedListAmp(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   * Returns a list of codes matched with given input. If several types are provided, paginantion is not supported
   * @summary Finding AMPs by group with pagination.
   * @param vmpgId vmpgCode
   * @param startKey The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key&#x27;s startKey
   * @param startDocumentId A vmp document ID
   * @param limit Number of rows
   */
  findPaginatedAmpsByGroupId(vmpgId, startKey, startDocumentId, limit) {
    let _body = null
    const _url =
      this.host +
      `/be_samv2/amp/byGroupId/${encodeURIComponent(String(vmpgId))}` +
      "?ts=" +
      new Date().getTime() +
      (startKey ? "&startKey=" + encodeURIComponent(String(startKey)) : "") +
      (startDocumentId ? "&startDocumentId=" + encodeURIComponent(String(startDocumentId)) : "") +
      (limit ? "&limit=" + encodeURIComponent(String(limit)) : "")
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new PaginatedListAmp_1.PaginatedListAmp(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   * Returns a list of codes matched with given input. If several types are provided, paginantion is not supported
   * @summary Finding AMPs by label with pagination.
   * @param language language
   * @param label label
   * @param startKey The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key&#x27;s startKey
   * @param startDocumentId An amp document ID
   * @param limit Number of rows
   */
  findPaginatedAmpsByLabel(language, label, startKey, startDocumentId, limit) {
    let _body = null
    const _url =
      this.host +
      `/be_samv2/amp` +
      "?ts=" +
      new Date().getTime() +
      (language ? "&language=" + encodeURIComponent(String(language)) : "") +
      (label ? "&label=" + encodeURIComponent(String(label)) : "") +
      (startKey ? "&startKey=" + encodeURIComponent(String(startKey)) : "") +
      (startDocumentId ? "&startDocumentId=" + encodeURIComponent(String(startDocumentId)) : "") +
      (limit ? "&limit=" + encodeURIComponent(String(limit)) : "")
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new PaginatedListAmp_1.PaginatedListAmp(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   * Returns a list of codes matched with given input. If several types are provided, paginantion is not supported
   * @summary Finding AMPs by vmp code with pagination.
   * @param vmpCode vmpCode
   * @param startKey The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key&#x27;s startKey
   * @param startDocumentId A amp document ID
   * @param limit Number of rows
   */
  findPaginatedAmpsByVmpCode(vmpCode, startKey, startDocumentId, limit) {
    let _body = null
    const _url =
      this.host +
      `/be_samv2/amp/byVmpCode/${encodeURIComponent(String(vmpCode))}` +
      "?ts=" +
      new Date().getTime() +
      (startKey ? "&startKey=" + encodeURIComponent(String(startKey)) : "") +
      (startDocumentId ? "&startDocumentId=" + encodeURIComponent(String(startDocumentId)) : "") +
      (limit ? "&limit=" + encodeURIComponent(String(limit)) : "")
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new PaginatedListAmp_1.PaginatedListAmp(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   * Returns a list of codes matched with given input. If several types are provided, paginantion is not supported
   * @summary Finding AMPs by vmp id with pagination.
   * @param vmpId vmpgCode
   * @param startKey The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key&#x27;s startKey
   * @param startDocumentId A amp document ID
   * @param limit Number of rows
   */
  findPaginatedAmpsByVmpId(vmpId, startKey, startDocumentId, limit) {
    let _body = null
    const _url =
      this.host +
      `/be_samv2/amp/byVmpId/${encodeURIComponent(String(vmpId))}` +
      "?ts=" +
      new Date().getTime() +
      (startKey ? "&startKey=" + encodeURIComponent(String(startKey)) : "") +
      (startDocumentId ? "&startDocumentId=" + encodeURIComponent(String(startDocumentId)) : "") +
      (limit ? "&limit=" + encodeURIComponent(String(limit)) : "")
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new PaginatedListAmp_1.PaginatedListAmp(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   * Returns a paginated list of NMPs by matching label. Matches occur per word
   * @summary Finding NMPs by label with pagination.
   * @param language language
   * @param label label
   * @param startKey The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key&#x27;s startKey
   * @param startDocumentId A vmp document ID
   * @param limit Number of rows
   */
  findPaginatedNmpsByLabel(language, label, startKey, startDocumentId, limit) {
    let _body = null
    const _url =
      this.host +
      `/be_samv2/nmp` +
      "?ts=" +
      new Date().getTime() +
      (language ? "&language=" + encodeURIComponent(String(language)) : "") +
      (label ? "&label=" + encodeURIComponent(String(label)) : "") +
      (startKey ? "&startKey=" + encodeURIComponent(String(startKey)) : "") +
      (startDocumentId ? "&startDocumentId=" + encodeURIComponent(String(startDocumentId)) : "") +
      (limit ? "&limit=" + encodeURIComponent(String(limit)) : "")
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new PaginatedListNmp_1.PaginatedListNmp(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   * Returns a list of codes matched with given input. If several types are provided, paginantion is not supported
   * @summary Finding VMP groups by language label with pagination.
   * @param language language
   * @param label label
   * @param startKey The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key&#x27;s startKey
   * @param startDocumentId A vmpgroup document ID
   * @param limit Number of rows
   */
  findPaginatedVmpGroupsByLabel(language, label, startKey, startDocumentId, limit) {
    let _body = null
    const _url =
      this.host +
      `/be_samv2/vmpgroup` +
      "?ts=" +
      new Date().getTime() +
      (language ? "&language=" + encodeURIComponent(String(language)) : "") +
      (label ? "&label=" + encodeURIComponent(String(label)) : "") +
      (startKey ? "&startKey=" + encodeURIComponent(String(startKey)) : "") +
      (startDocumentId ? "&startDocumentId=" + encodeURIComponent(String(startDocumentId)) : "") +
      (limit ? "&limit=" + encodeURIComponent(String(limit)) : "")
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new PaginatedListVmpGroup_1.PaginatedListVmpGroup(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   * Returns a list of codes matched with given input. If several types are provided, paginantion is not supported
   * @summary Finding VMP groups by cmpgCode with pagination.
   * @param vmpgCode vmpgCode
   * @param startKey The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key&#x27;s startKey
   * @param startDocumentId A vmpgroup document ID
   * @param limit Number of rows
   */
  findPaginatedVmpGroupsByVmpGroupCode(vmpgCode, startKey, startDocumentId, limit) {
    let _body = null
    const _url =
      this.host +
      `/be_samv2/vmpgroup/byGroupCode/${encodeURIComponent(String(vmpgCode))}` +
      "?ts=" +
      new Date().getTime() +
      (startKey ? "&startKey=" + encodeURIComponent(String(startKey)) : "") +
      (startDocumentId ? "&startDocumentId=" + encodeURIComponent(String(startDocumentId)) : "") +
      (limit ? "&limit=" + encodeURIComponent(String(limit)) : "")
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new PaginatedListVmpGroup_1.PaginatedListVmpGroup(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   * Returns a list of codes matched with given input. If several types are provided, paginantion is not supported
   * @summary Finding VMPs by group with pagination.
   * @param vmpgCode vmpgCode
   * @param startKey The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key&#x27;s startKey
   * @param startDocumentId A vmp document ID
   * @param limit Number of rows
   */
  findPaginatedVmpsByGroupCode(vmpgCode, startKey, startDocumentId, limit) {
    let _body = null
    const _url =
      this.host +
      `/be_samv2/vmp/byGroupCode/${encodeURIComponent(String(vmpgCode))}` +
      "?ts=" +
      new Date().getTime() +
      (startKey ? "&startKey=" + encodeURIComponent(String(startKey)) : "") +
      (startDocumentId ? "&startDocumentId=" + encodeURIComponent(String(startDocumentId)) : "") +
      (limit ? "&limit=" + encodeURIComponent(String(limit)) : "")
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new PaginatedListVmp_1.PaginatedListVmp(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   * Returns a list of codes matched with given input. If several types are provided, paginantion is not supported
   * @summary Finding VMPs by group with pagination.
   * @param vmpgId vmpgId
   * @param startKey The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key&#x27;s startKey
   * @param startDocumentId A vmp document ID
   * @param limit Number of rows
   */
  findPaginatedVmpsByGroupId(vmpgId, startKey, startDocumentId, limit) {
    let _body = null
    const _url =
      this.host +
      `/be_samv2/vmp/byGroupId/${encodeURIComponent(String(vmpgId))}` +
      "?ts=" +
      new Date().getTime() +
      (startKey ? "&startKey=" + encodeURIComponent(String(startKey)) : "") +
      (startDocumentId ? "&startDocumentId=" + encodeURIComponent(String(startDocumentId)) : "") +
      (limit ? "&limit=" + encodeURIComponent(String(limit)) : "")
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new PaginatedListVmp_1.PaginatedListVmp(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   * Returns a paginated list of VMPs by matching label. Matches occur per word
   * @summary Finding VMPs by label with pagination.
   * @param language language
   * @param label label
   * @param startKey The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key&#x27;s startKey
   * @param startDocumentId A vmp document ID
   * @param limit Number of rows
   */
  findPaginatedVmpsByLabel(language, label, startKey, startDocumentId, limit) {
    let _body = null
    const _url =
      this.host +
      `/be_samv2/vmp` +
      "?ts=" +
      new Date().getTime() +
      (language ? "&language=" + encodeURIComponent(String(language)) : "") +
      (label ? "&label=" + encodeURIComponent(String(label)) : "") +
      (startKey ? "&startKey=" + encodeURIComponent(String(startKey)) : "") +
      (startDocumentId ? "&startDocumentId=" + encodeURIComponent(String(startDocumentId)) : "") +
      (limit ? "&limit=" + encodeURIComponent(String(limit)) : "")
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new PaginatedListVmp_1.PaginatedListVmp(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   * Returns a list of codes matched with given input. If several types are provided, paginantion is not supported
   * @summary Finding VMPs by group with pagination.
   * @param vmpCode vmpCode
   * @param startKey The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key&#x27;s startKey
   * @param startDocumentId A vmp document ID
   * @param limit Number of rows
   */
  findPaginatedVmpsByVmpCode(vmpCode, startKey, startDocumentId, limit) {
    let _body = null
    const _url =
      this.host +
      `/be_samv2/vmp/byVmpCode/${encodeURIComponent(String(vmpCode))}` +
      "?ts=" +
      new Date().getTime() +
      (startKey ? "&startKey=" + encodeURIComponent(String(startKey)) : "") +
      (startDocumentId ? "&startDocumentId=" + encodeURIComponent(String(startDocumentId)) : "") +
      (limit ? "&limit=" + encodeURIComponent(String(limit)) : "")
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new PaginatedListVmp_1.PaginatedListVmp(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   * Returns a list of codes matched with given input. If several types are provided, paginantion is not supported
   * @summary Get Samv2 version.
   */
  getSamVersion() {
    let _body = null
    const _url = this.host + `/be_samv2/v` + "?ts=" + new Date().getTime()
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new SamVersion_1.SamVersion(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   * Returns a list of amps matched with given input. If several types are provided, paginantion is not supported
   * @summary Finding AMPs by dmpp code
   * @param body
   */
  listAmpsByDmppCodes(body) {
    let _body = null
    _body = body
    const _url = this.host + `/be_samv2/amp/byDmppCodes` + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new Amp_1.Amp(it)))
      .catch(err => this.handleError(err))
  }
  /**
   * Returns a list of codes matched with given input. If several types are provided, paginantion is not supported
   * @summary Finding AMPs by group.
   * @param body
   */
  listAmpsByGroupCodes(body) {
    let _body = null
    _body = body
    const _url = this.host + `/be_samv2/amp/byGroupCodes` + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new Amp_1.Amp(it)))
      .catch(err => this.handleError(err))
  }
  /**
   * Returns a list of codes matched with given input. If several types are provided, paginantion is not supported
   * @summary Finding AMPs by group.
   * @param body
   */
  listAmpsByGroupIds(body) {
    let _body = null
    _body = body
    const _url = this.host + `/be_samv2/amp/byGroupIds` + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new Amp_1.Amp(it)))
      .catch(err => this.handleError(err))
  }
  /**
   * Returns a list of codes matched with given input. If several types are provided, paginantion is not supported
   * @summary Finding AMPs by vmp code.
   * @param body
   */
  listAmpsByVmpCodes(body) {
    let _body = null
    _body = body
    const _url = this.host + `/be_samv2/amp/byVmpCodes` + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new Amp_1.Amp(it)))
      .catch(err => this.handleError(err))
  }
  /**
   * Returns a list of codes matched with given input. If several types are provided, paginantion is not supported
   * @summary Finding AMPs by vmp id.
   * @param body
   */
  listAmpsByVmpIds(body) {
    let _body = null
    _body = body
    const _url = this.host + `/be_samv2/amp/byVmpIds` + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new Amp_1.Amp(it)))
      .catch(err => this.handleError(err))
  }
  /**
   * Returns a list of codes matched with given input. If several types are provided, paginantion is not supported
   * @summary Finding NMPs by cnk id.
   * @param body
   */
  listNmpsByCnks(body) {
    let _body = null
    _body = body
    const _url = this.host + `/be_samv2/nmp/byCnks` + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new Nmp_1.Nmp(it)))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary List all pharmaceutical forms.
   */
  listPharmaceuticalForms() {
    let _body = null
    const _url = this.host + `/be_samv2/pharmaform` + "?ts=" + new Date().getTime()
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new PharmaceuticalForm_1.PharmaceuticalForm(it)))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary List all substances.
   */
  listSubstances() {
    let _body = null
    const _url = this.host + `/be_samv2/substance` + "?ts=" + new Date().getTime()
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new Substance_1.Substance(it)))
      .catch(err => this.handleError(err))
  }
  /**
   * Returns a list of group codes matched with given input. If several types are provided, paginantion is not supported
   * @summary Finding AMPs by group.
   * @param body
   */
  listVmpGroupsByVmpGroupCodes(body) {
    let _body = null
    _body = body
    const _url = this.host + `/be_samv2/vmpgroup/byGroupCodes` + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new VmpGroup_1.VmpGroup(it)))
      .catch(err => this.handleError(err))
  }
  /**
   * Returns a list of codes matched with given input. If several types are provided, paginantion is not supported
   * @summary Finding VMPs by group.
   * @param body
   */
  listVmpsByGroupIds(body) {
    let _body = null
    _body = body
    const _url = this.host + `/be_samv2/vmp/byGroupIds` + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new Vmp_1.Vmp(it)))
      .catch(err => this.handleError(err))
  }
  /**
   * Returns a list of codes matched with given input. If several types are provided, paginantion is not supported
   * @summary Finding VMPs by group.
   * @param body
   */
  listVmpsByVmpCodes(body) {
    let _body = null
    _body = body
    const _url = this.host + `/be_samv2/vmp/byVmpCodes` + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new Vmp_1.Vmp(it)))
      .catch(err => this.handleError(err))
  }
}
exports.IccBeSamv2Api = IccBeSamv2Api
//# sourceMappingURL=IccBeSamv2Api.js.map
