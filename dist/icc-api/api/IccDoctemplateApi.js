"use strict"
Object.defineProperty(exports, "__esModule", { value: true })
/**
 * iCure Cloud API Documentation
 * Spring shop sample application
 *
 * OpenAPI spec version: v0.0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
const XHR_1 = require("./XHR")
const DocIdentifier_1 = require("../model/DocIdentifier")
const DocumentTemplate_1 = require("../model/DocumentTemplate")
class IccDoctemplateApi {
  constructor(host, headers, fetchImpl) {
    this.host = host
    this.headers = Object.keys(headers).map(k => new XHR_1.XHR.Header(k, headers[k]))
    this.fetchImpl = fetchImpl
  }
  setHeaders(h) {
    this.headers = h
  }
  handleError(e) {
    throw e
  }
  /**
   * Returns an instance of created document template.
   * @summary Create a document template with the current user
   * @param body
   */
  createDocumentTemplate(body) {
    let _body = null
    _body = body
    const _url = this.host + `/doctemplate` + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new DocumentTemplate_1.DocumentTemplate(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Deletes a document template
   * @param documentTemplateIds
   */
  deleteDocumentTemplate(documentTemplateIds) {
    let _body = null
    const _url =
      this.host +
      `/doctemplate/${encodeURIComponent(String(documentTemplateIds))}` +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    return XHR_1.XHR.sendCommand("DELETE", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new DocIdentifier_1.DocIdentifier(it)))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Gets all document templates for all users
   */
  findAllDocumentTemplates() {
    let _body = null
    const _url = this.host + `/doctemplate/find/all` + "?ts=" + new Date().getTime()
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new DocumentTemplate_1.DocumentTemplate(it)))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Gets all document templates for current user
   */
  findDocumentTemplates() {
    let _body = null
    const _url = this.host + `/doctemplate` + "?ts=" + new Date().getTime()
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new DocumentTemplate_1.DocumentTemplate(it)))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Gets all document templates by Type
   * @param documentTypeCode
   */
  findDocumentTemplatesByDocumentType(documentTypeCode) {
    let _body = null
    const _url =
      this.host +
      `/doctemplate/byDocumentType/${encodeURIComponent(String(documentTypeCode))}` +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new DocumentTemplate_1.DocumentTemplate(it)))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Gets all document templates by Type For currentUser
   * @param documentTypeCode
   */
  findDocumentTemplatesByDocumentTypeForCurrentUser(documentTypeCode) {
    let _body = null
    const _url =
      this.host +
      `/doctemplate/byDocumentTypeForCurrentUser/${encodeURIComponent(String(documentTypeCode))}` +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new DocumentTemplate_1.DocumentTemplate(it)))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Gets all document templates
   * @param specialityCode
   */
  findDocumentTemplatesBySpeciality(specialityCode) {
    let _body = null
    const _url =
      this.host +
      `/doctemplate/bySpecialty/${encodeURIComponent(String(specialityCode))}` +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body.map(it => new DocumentTemplate_1.DocumentTemplate(it)))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Download a the document template attachment
   * @param documentTemplateId
   * @param attachmentId
   */
  getAttachmentText(documentTemplateId, attachmentId) {
    let _body = null
    const _url =
      this.host +
      `/doctemplate/${encodeURIComponent(
        String(documentTemplateId)
      )}/attachmentText/${encodeURIComponent(String(attachmentId))}` +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body)
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Gets a document template
   * @param documentTemplateId
   */
  getDocumentTemplate(documentTemplateId) {
    let _body = null
    const _url =
      this.host +
      `/doctemplate/${encodeURIComponent(String(documentTemplateId))}` +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => new DocumentTemplate_1.DocumentTemplate(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Download a the document template attachment
   * @param documentTemplateId
   * @param attachmentId
   */
  getDocumentTemplateAttachment(documentTemplateId, attachmentId) {
    let _body = null
    const _url =
      this.host +
      `/doctemplate/${encodeURIComponent(
        String(documentTemplateId)
      )}/attachment/${encodeURIComponent(String(attachmentId))}` +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    return XHR_1.XHR.sendCommand("GET", _url, headers, _body, this.fetchImpl)
      .then(doc => doc.body)
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Creates a document's attachment
   * @param body
   * @param documentTemplateId
   */
  setDocumentTemplateAttachment(documentTemplateId, body) {
    let _body = null
    _body = body
    const _url =
      this.host +
      `/doctemplate/${encodeURIComponent(String(documentTemplateId))}/attachment` +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/octet-stream"))
    return XHR_1.XHR.sendCommand("PUT", _url, headers, _body, this.fetchImpl)
      .then(doc => new DocumentTemplate_1.DocumentTemplate(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   *
   * @summary Creates a document's attachment
   * @param body
   * @param documentTemplateId
   */
  setDocumentTemplateAttachmentJson(documentTemplateId, body) {
    let _body = null
    _body = body
    const _url =
      this.host +
      `/doctemplate/${encodeURIComponent(String(documentTemplateId))}/attachmentJson` +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/octet-stream"))
    return XHR_1.XHR.sendCommand("PUT", _url, headers, _body, this.fetchImpl)
      .then(doc => new DocumentTemplate_1.DocumentTemplate(doc.body))
      .catch(err => this.handleError(err))
  }
  /**
   * Returns an instance of created document template.
   * @summary Modify a document template with the current user
   * @param body
   * @param documentTemplateId
   */
  updateDocumentTemplate(documentTemplateId, body) {
    let _body = null
    _body = body
    const _url =
      this.host +
      `/doctemplate/${encodeURIComponent(String(documentTemplateId))}` +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR_1.XHR.Header("Content-Type", "application/json"))
    return XHR_1.XHR.sendCommand("PUT", _url, headers, _body, this.fetchImpl)
      .then(doc => new DocumentTemplate_1.DocumentTemplate(doc.body))
      .catch(err => this.handleError(err))
  }
}
exports.IccDoctemplateApi = IccDoctemplateApi
//# sourceMappingURL=IccDoctemplateApi.js.map
